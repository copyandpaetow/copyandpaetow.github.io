---
import Back from "../icons/back.svg?raw";
import RemoteBody from "./remote-body.astro";
import Settings from "../menu/settings.astro";
import Program from "../menu/program.astro";

export interface Props {
	className?: string;
}

const { className = "" } = Astro.props;
---

<div class="remote">
	<RemoteBody className="inactive-remote" inert />
	<details
		class=`remote-content menu-details screen-clipped-border screen-root screen-content-layout first-menu-level no-overflow ${className}`
	>
		<summary>
			<p class="visible-closed visually-hidden">open remote menu</p>
			<p class="visible-open with-icon-start"><Fragment set:html={Back} /> exit</p>
		</summary>
		<details class="menu-details screen-content-layout full-screen">
			<summary class="with-icon-start">
				<p class="visible-closed">program</p>
				<p class="visible-open with-icon-start"><Fragment set:html={Back} /> back</p>
			</summary>
			<Program />
		</details>
		<details class="menu-details screen-content-layout full-screen">
			<summary class="with-icon-start">
				<p class="visible-closed">settings</p>
				<p class="visible-open with-icon-start"><Fragment set:html={Back} /> back</p>
			</summary>
			<Settings />
		</details>
	</details>
</div>

<style is:global>
	@layer components {
		.inactive-remote {
			transform-origin: top left;
			transform: translateY(-1px) translateX(25%) rotateY(115deg) rotateX(90.01deg)
				scale3d(var(--remote-scale), var(--remote-scale), 1);
			width: max-content;
		}

		:where(body:has(details[open])) {
			position: fixed;
			width: 100%;
			height: 100%;

			.scene {
				--scene-padding: 0px;
				--remote-depth: 0px;
			}
		}

		.remote {
			height: var(--remote-depth);

			display: grid;
			& > * {
				grid-area: 1 / 1 /-1 / -1;
			}
		}

		.remote-content {
			&:not([open]) {
				--save-screen-padding-block: 0;
				--save-screen-padding-inline: 0;
				--screen-background: transparent;
				--menu-height: var(--remote-depth);
				font-family: inherit;
				height: var(--remote-depth);
			}

			&:not([open]) details {
				display: none;
			}

			&:not([open]).screen-root::before,
			&:not([open]).screen-root::after {
				content: none;
			}

			& > summary::before,
			& > summary::marker {
				content: none;
			}

			&:not([open]) > summary {
				height: var(--remote-depth);
			}

			&[open] {
				--menu-height: var(--inner-screen-height);
				--menu-width: var(--inner-screen-width);
				--menu-inset: var(--tv-absolute-screen-position);
				transform: translateZ(calc(var(--tv-depth) + 16px));
			}

			& details {
				--menu-inset: 0 0 0 calc(var(--save-screen-padding-inline) * -1);
			}
		}
	}
</style>

---
import Menu from "../menu/menu.astro";
import RemoteBody from "./remote-body.astro";

export interface Props {
	className?: string;
}

const { className = "" } = Astro.props;
---

<script>
	import "../../../components/helper/popover-helper";
</script>

<Fragment>
	<div class={`remote ${className}`}>
		<button popovertarget="remote-modal" popovertargetaction="show"
			>open settings in the style of a remote</button
		>
		<RemoteBody className="inactive-remote" inert />
	</div>
	<div class={`remote-popup ${className}`}>
		<popover-helper type="modal">
			<dialog id="remote-modal" popover class="scene remote-modal">
				<Menu />
				<div class="remote-position">
					<RemoteBody />
				</div>
			</dialog>
		</popover-helper>
	</div>
</Fragment>

<style is:global>
	@layer components {
		.remote {
			position: relative;
			height: var(--remote-depth);

			& > button {
				position: absolute;
				bottom: 0;
				height: var(--min-button-height);
				width: 100%;
				appearance: none;
				color: transparent;
				background-color: transparent;
				border: none;
				transform: translateZ(var(--remote-depth));
			}

			.inactive-remote {
				transform-origin: top left;
				transform: translateY(-1px) translateX(25%) rotateY(115deg) rotateX(90.01deg)
					scale3d(var(--remote-scale), var(--remote-scale), 1);
				width: max-content;
			}
		}

		.remote-popup {
			isolation: isolate;

			/*remove once popovers are supported in FF */
			&:not(:has(:where(:popover-open, [open]))) {
				display: none;
			}
		}

		.remote-modal {
			--dialog-height: var(--inner-screen-height);
			--dialog-width: var(--inner-screen-width);

			top: calc(var(--scene-padding) + var(--tv-screen-inset));
			left: calc((100vw - var(--tv-width)) / 2 + var(--tv-screen-inset));
			position: fixed;
			/* &::where(:popover-open, [open]) .inactive-remote {
				display: none;
			}

			&:has(.secondary-menu:where(:popover-open, [open])) .teletext {
				display: none;
			} */
		}
		.secondary-menu {
			position: fixed;

			inset: 0;

			&:popover-open {
				top: calc(var(--scene-padding) + var(--tv-screen-inset));
				left: calc((100vw - var(--tv-width)) / 2 + var(--tv-screen-inset));
			}

			&::backdrop {
				display: none;
			}
		}

		@keyframes fromBottom {
			0% {
				transform: translateX(-50%) translateY(100vh);
			}
			100% {
				transform: translateX(-50%) translateY(var(--module-gap));
			}
		}

		.remote-modal:where(:popover-open, [open]) .remote-position {
			position: absolute;
			left: 50%;

			transform: translateX(-50%) translateY(var(--module-gap));
			height: calc(
				(100vh - var(--tv-height)) - var(--remote-active-offset) + var(--module-gap) +
					var(--tv-padding)
			);
			overflow-y: auto;

			@media (prefers-reduced-motion: no-preference) {
				animation: fromBottom 1s ease;
			}
		}
	}
</style>

---
import AboutPreview from "../content/about-preview.astro";
import BewegungPreview from "../content/bewegung-preview.astro";
import RickrollPreviw from "../content/rickroll.astro";
import IndexPreview from "../content/index-preview.astro";
import NowPreview from "../content/now-preview.astro";
import ThirdDimensionPreview from "../content/third-dimension-preview.astro";
import DinkelbergPreview from "../content/dinkelberg-preview.astro";
import CassetteTape from "./cassette-tape.astro";

export interface Props {
	className?: string;
}

const { className = "" } = Astro.props;

const randomNumber = (min: number, max: number) => {
	return Math.floor(Math.random() * (max - min + 1) + min);
};
---

<script>
	import { cassetteInteractionEnhancement } from "./cassette-interaction.ts";

	setTimeout(cassetteInteractionEnhancement, 2000);
</script>

<ul class=`small-screen cassette-pile ${className}`>
	<li
		id="intro"
		class="tv-layout cassette"
		style=`
	--cassette-offset-x: ${randomNumber(-10, 10)}%;
	--cassette-offset-z: ${randomNumber(1, 30)}px;`
	>
		<a
			href="#intro"
			class="vhs-slot cassette-body three-dimensional"
			aria-label="jumps to the tv and previews the intro"
		>
			<CassetteTape decoType="c" className="front">the intro nobody asked for</CassetteTape>
		</a>
		<dialog
			class="screen-content cassette-content screen-clipped-border screen-root screen-content-layout overflow-scroll"
		>
			<IndexPreview />
		</dialog>
	</li>

	<li
		id="now"
		class="tv-layout cassette"
		style=`
	--cassette-offset-x: ${randomNumber(-10, 10)}%;
	--cassette-offset-z: ${randomNumber(1, 30)}px;`
	>
		<a
			href="#now"
			class="vhs-slot cassette-body three-dimensional"
			aria-label="jumps to the tv and previews what I am working on at the moment"
		>
			<CassetteTape className="front" decoType="c" tapeType="stripes" color="var(--cyan)">
				now
			</CassetteTape>
		</a>
		<dialog
			class="screen-content cassette-content screen-clipped-border screen-root screen-content-layout overflow-scroll"
		>
			<NowPreview />
		</dialog>
	</li>

	<li
		id="bewegung"
		class="tv-layout cassette"
		style=`
	--cassette-offset-x: ${randomNumber(-10, 10)}%;
	--cassette-offset-z: ${randomNumber(1, 30)}px;`
	>
		<a
			href="#bewegung"
			class="vhs-slot cassette-body three-dimensional"
			aria-label="jumps to the tv and previews the bewegung github project"
		>
			<CassetteTape className="front" decoType="a" tapeType="stripes">
				how to make an animation library
			</CassetteTape>
		</a>
		<dialog
			class="screen-content cassette-content screen-clipped-border screen-root screen-content-layout overflow-scroll"
		>
			<BewegungPreview />
		</dialog>
	</li>

	<li
		id="that-3d-episode"
		class="tv-layout cassette"
		style=`
	--cassette-offset-x: ${randomNumber(-10, 10)}%;
	--cassette-offset-z: ${randomNumber(1, 30)}px;`
	>
		<a
			href="#that-3d-episode"
			class="vhs-slot cassette-body three-dimensional"
			aria-label="jumps to the tv and shows the whole scene in 3D"
		>
			<CassetteTape className="front" decoType="b" tapeType="checked" color="var(--orange)">
				That 3D episode
			</CassetteTape>
		</a>
		<dialog
			class="screen-content cassette-content screen-clipped-border screen-root screen-content-layout overflow-scroll"
		>
			<ThirdDimensionPreview />
		</dialog>
	</li>

	<li
		id="dinkelberg"
		class="tv-layout cassette"
		style=`
	--cassette-offset-x: ${randomNumber(-10, 10)}%;
	--cassette-offset-z: ${randomNumber(1, 30)}px;`
	>
		<a
			href="#dinkelberg"
			class="vhs-slot cassette-body three-dimensional"
			aria-label="jumps to the tv and previews a meme"
		>
			<CassetteTape className="front" decoType="b" tapeType="checked" color="var(--magenta)">
				DINKELBERG
			</CassetteTape>
		</a>
		<dialog
			class="screen-content cassette-content screen-clipped-border screen-root fullscreen-content-layout overflow-scroll"
		>
			<DinkelbergPreview className="full-screen" />
		</dialog>
	</li>

	<li
		id="printer"
		class="tv-layout cassette"
		style=`
	--cassette-offset-x: ${randomNumber(-10, 10)}%;
	--cassette-offset-z: ${randomNumber(1, 30)}px;`
	>
		<a
			href="#printer"
			class="vhs-slot cassette-body three-dimensional"
			aria-label="jumps to the tv and previews a meme video"
		>
			<CassetteTape className="front" decoType="b" tapeType="checked" color="var(--blue)">
				How to fix your printer
			</CassetteTape>
		</a>
		<dialog
			class="screen-content cassette-content screen-clipped-border screen-root fullscreen-content-layout overflow-scroll"
		>
			<RickrollPreviw className="full-screen" />
		</dialog>
	</li>

	<li
		id="about"
		class="tv-layout cassette"
		style=`
	--cassette-offset-x: ${randomNumber(-10, 10)}%;
	--cassette-offset-z: ${randomNumber(1, 30)}px;`
	>
		<a
			href="#about"
			class="vhs-slot cassette-body three-dimensional"
			aria-label="jumps to the tv and previews content about myself"
		>
			<CassetteTape className="front" decoType="c" tapeType="stripes">about</CassetteTape>
		</a>
		<dialog
			class="screen-content cassette-content screen-clipped-border screen-root screen-content-layout overflow-scroll"
		>
			<AboutPreview />
		</dialog>
	</li>

	<li
		id="css-database"
		class="tv-layout cassette"
		style=`
	--cassette-offset-x: ${randomNumber(-10, 10)}%;
	--cassette-offset-z: ${randomNumber(1, 30)}px;`
	>
		<a
			href="#css-database"
			class="vhs-slot cassette-body three-dimensional"
			aria-label="jumps to the tv and previews a meme video"
		>
			<CassetteTape className="front" decoType="b" tapeType="checked" color="var(--blue)">
				Connect your database with CSS
			</CassetteTape>
		</a>

		<dialog
			class="screen-content cassette-content screen-clipped-border screen-root fullscreen-content-layout overflow-scroll"
		>
			<RickrollPreviw className="full-screen" />
		</dialog>
	</li>
</ul>

<style is:global>
	@layer components {
		.cassette-pile {
			--list-gap: var(--cassette-gap) 0;
			--list-item-gap: 0;

			&:has(:target):not(:has(li:nth-of-type(1):target)) > li:nth-of-type(1) .cassette-body,
			&:has(li:nth-of-type(1):target) > li:nth-of-type(2) .cassette-body {
				transform: translateZ(var(--cassette-offset-z));
			}
		}

		@media (prefers-reduced-motion: no-preference) {
			:has(:target) {
				scroll-behavior: smooth;
			}
		}

		/* this needs to be refactored at some point */
		.cassette .screen-content {
			& ul {
				--list-item-gap: 0 2.25em;
				--list-gap: 1rem;
			}

			& li {
				align-items: start;
			}
		}

		.cassette:not(:target) {
			grid-template-columns: 1fr max-content 1fr;
			grid-template-rows: max-content;
			grid-template-areas: ". vhs-slot .";
			height: 100%;

			.cassette-content {
				display: none;
			}
		}

		:target {
			scroll-margin-block-start: var(--tv-height);
		}

		.cassette:target {
			order: -1;
			margin-top: calc(var(--tv-height) * -1);
			transform: translateZ(calc(var(--tv-offset-z) - var(--screen-offset-z)));
			width: 100%;

			.cassette-body {
				transform: translateZ(calc(var(--cassette-active-offset-z) + var(--screen-offset-z)));
				margin-inline: auto;
			}

			.cassette-content {
				animation: on 500ms ease;
				transform: translateZ(calc(var(--screen-offset-z) / 2));
				position: relative;
			}

			:has(#tv-power-button:not(:checked)) & .cassette-content {
				scale: 0 0;
				animation: on 500ms ease reverse;
			}
		}

		.cassette-body {
			--cassette-background: hsla(0, 0%, 10%, 1);

			--block-border: var(--border-width) solid var(--black);
			--block-background: var(--cassette-background);
			--block-depth: calc(var(--cassette-depth));
			--block-width: calc(var(--vhs-slot-width) - 2 * var(--vhs-slot-padding));
			--block-aspect-ratio: var(--cassette-aspect-ratio);
			--block-border-radius: var(--tv-border-radius);
			--default-display: grid;

			transform: translateX(calc(var(--cassette-offset-x))) translateZ(var(--cassette-offset-z));
			text-decoration: none;
		}

		.cassette-body.three-dimensional {
			width: calc(var(--vhs-slot-width) - 2 * var(--vhs-slot-padding));
			aspect-ratio: var(--cassette-aspect-ratio);
		}
	}
</style>

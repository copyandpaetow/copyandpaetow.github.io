---
import Block from "./block.astro";

export interface Props {
	id: string;
	className?: string;
	type?: "row" | "column";
}

const { id, className = "", type = "column" } = Astro.props;
---

<label for={id} class={`tv-toggle ${className}`} data-type={type}>
	<Block className="toggle-button"><slot name="icon" /></Block>
	<slot />
	<input type="checkbox" id={id} hidden checked />
</label>

<style is:global>
	@layer components {
		.tv-toggle {
			--_tv-button-background: var(--tv-button-background, var(--tv-background));
			--_tv-button-background-border: var(--tv-button-background, var(--tv-border));
			--_tv-button-active-background: var(--tv-button-active-background, var(--tv-background));
			--_tv-button-active-background-border: var(--tv-button-active-background, var(--tv-border));

			display: grid;

			gap: var(--tv-button-gap);
			font-size: var(--font--2);
			align-items: center;

			&[data-type="row"] {
				grid-template-rows: max-content max-content;
			}
			&[data-type="column"] {
				grid-template-columns: max-content max-content;
				width: max-content;
			}
		}

		.toggle-button {
			--block-depth: var(--tv-button-depth);
			--block-width: var(--tv-button-width);
			--block-height: var(--tv-button-height);
			--block-background: var(--_tv-button-background);
			--block-border: 2px solid var(--_tv-button-background-border);

			transform: translateZ(var(--block-depth));
			box-shadow: 1px 1px 2px 1px hsla(0, 0%, 0%, 0.25);

			& svg {
				height: 100%;
				width: 100%;
			}

			&:has(~ input:checked) {
				--block-background: var(--_tv-button-active-background);
				--block-border: 2px solid var(--_tv-button-active-background-border);

				transform: translateZ(calc(var(--block-depth) / 2));
				box-shadow: 1px 1px 1px 0px hsla(0, 0%, 0%, 0.25);
			}
		}
	}
</style>

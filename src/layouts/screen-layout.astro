---
import "../styles/styles.css";
import Back from "../features/tv/icons/back.svg?raw";
import Program from "../features/tv/menu/program.astro";
import Settings from "../features/tv/menu/settings.astro";

export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="copyandpaetow" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body class="screen-root screen-content-layout">
		<nav class="">
			<!--@ts-expect-error popovertargetaction is to new? -->
			<details
				class="screen-layout-content menu-details screen-root screen-content-layout first-menu-level"
			>
				<summary class="with-icon-start">
					<p class="visible-closed">
						settings
						<span class="no-tv">(no tv realism)</span>
						<span class="no-anim">(no animations)</span>
					</p>
					<p class="visible-open with-icon-start">
						<Fragment set:html={Back} /> exit
					</p>
				</summary>
				<details class="menu-details screen-content-layout full-screen">
					<summary class="with-icon-start">
						<p class="visible-closed">program</p>
						<p class="visible-open with-icon-start"><Fragment set:html={Back} /> back</p>
					</summary>
					<Program />
				</details>
				<details class="menu-details screen-content-layout full-screen">
					<summary class="with-icon-start">
						<p class="visible-closed">settings</p>
						<p class="visible-open with-icon-start"><Fragment set:html={Back} /> back</p>
					</summary>
					<Settings animationDefault={false} tvRealismDefault={false} />
				</details>
			</details>
		</nav>
		<slot name="header" />
		<main>
			<slot />
		</main>
		<slot name="footer" />
	</body>
</html>

<style is:global>
	@layer components {
		body {
			--save-screen-padding: 0.5rem;
			--screen-gap: 2rem 0rem;

			& nav:not(:has(details[open])) {
				position: sticky;
				top: 0;
			}

			&:has(details[open]) {
				height: 100dvh;
				position: fixed;
			}

			@media (min-width: 22rem) {
				--save-screen-padding: 1rem;
			}
			@media (min-width: 28rem) {
				--save-screen-padding: 2rem;
			}
		}

		header {
			margin-top: 5rem;
		}

		.full-screen-menu {
			@media (min-width: 22rem) {
				--save-screen-padding: 3rem 1rem;
			}

			@media (min-width: 28rem) {
				--save-screen-padding: 5rem 2rem;
			}
		}

		.settings-button {
			display: grid;
			grid-auto-flow: column;
			gap: 0.25rem;
		}

		:has(#settings-animation:checked) .no-anim,
		:has(#settings-tv-realism:checked) .no-tv {
			display: none;
		}

		.screen-content-layout > .screen-back-button {
			margin-bottom: 5%;
		}

		.screen-root::after,
		.screen-root::before {
			position: fixed;
			inset: 0;
			width: 100%;
			height: 100svh;
		}

		.tertiary-menu {
			--dialog-z-index: 3;
		}

		.screen-layout-content {
			&:not([open]) {
				--save-screen-padding-block: 0;
				--save-screen-padding-inline: 0;
				--screen-background: transparent;
				width: fit-content;
				height: fit-content;
			}

			&:not([open]).screen-root::before,
			&:not([open]).screen-root::after,
			& > summary::before,
			& > summary::marker {
				content: none;
			}

			&[open] {
				--menu-height: 100dvh;
				--menu-width: 100%;
				--menu-inset: 0;
				--screen-gap: 0.5rem 0rem;
				--save-screen-padding-block: 5vh;
			}

			& .fullscreen-content-layout {
				--screen-gap: 0rem 0rem;
			}

			& .fullscreen-content-layout[open] {
				grid-column: full-screen;
			}

			& > details:not([open]) {
				grid-column: save-screen;
			}
		}
	}
</style>

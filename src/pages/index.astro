---
import Layout from "../layouts/Layout.astro";
import TV from "../components/TV.astro";
import Cassette from "../components/Cassette.astro";
import CassetteScreen from "../components/CassetteScreen.astro";
---

<script>
	/*

- try new screen shape
- improve remote color and borders
- maybe the settings buttons should be inaccessible as long as the remote is not "open"
- we should be able to define which side the camera "sees", so we can decide which blocks to render or not
- maybe we can just hide all elements of the remote besides the power button and the base shape
- the remote screen needs routes for navigation, maybe that should also be a landmark there
- enable channel functionality (home, up, down, select, scroll snap, arrow keys)
- enable settings functionality (power, mute, animations)
- readd a power light on the screen
- have an intro effect
=> start rotated, and zoomed out, slowly transition to the normal position

## JS

- reset buttons if power is clicked
- enable popover functionality for firefox
- animate putting in a new tape
- improve the remote animation (initial location is only valid if we are not scrolled down)
- add and cache sounds
=> tv on/off
=> cassette tape cat/willhelm scream

- rotate the scene based on mouse position

## bugs

- tape variants show whitespace in smaller viewports

## refactorings

- split tv into more managable parts


## features
- add scenery that change with the content of the selected tape


*/
</script>

<Layout title="Copy and Paetow">
	<nav></nav>

	<header></header>

	<main class="scene">
		<TV>
			<Cassette decoType="c" id="1">
				<a href="#1" aria-label="jumps to the tv and previews this page"
					>the intro nobody asked for</a
				>
				<CassetteScreen slot="screen" overlay="lines">
					<h1>Hi, Lucas here</h1>
					<p>
						I am looking for a opportunities to create delight and performant movements on the web.
					</p>
					<button>hello</button>
				</CassetteScreen>
			</Cassette>
			<Cassette decoType="b" tapeType="checked" id="od">
				<a href="#od">Connect your database with CSS</a>
				<CassetteScreen slot="screen">
					<p>fake news</p>
				</CassetteScreen>
			</Cassette>
			<Cassette decoType="c" tapeType="stripes"><p>Your joke here</p></Cassette>
			<Cassette decoType="a" tapeType="checked"><p>DINKELBERG</p></Cassette>
			<Cassette decoType="a" tapeType="checked"><p>DINKELBERG 2</p></Cassette>
			<Cassette decoType="a" tapeType="checked"><p>DINKELBERG 3</p></Cassette>
			<Cassette decoType="a" tapeType="checked"><p>DINKELBERG 4</p></Cassette>
			<Cassette decoType="a" tapeType="checked"><p>DINKELBERG 5</p></Cassette>
			<Cassette decoType="a" tapeType="checked" id="printer">
				<a href="#printer">How to fix your printer</a>
				<CassetteScreen slot="screen">
					<p>fake news</p>
				</CassetteScreen>
			</Cassette>
			<Cassette decoType="a" tapeType="checked"><p>DINKELBERG 3</p></Cassette>
			<Cassette decoType="a" tapeType="checked"><p>DINKELBERG 4</p></Cassette>
			<Cassette decoType="a" tapeType="checked"><p>DINKELBERG 5</p></Cassette>
		</TV>
	</main>
</Layout>
<footer>Its 2023 and I am still putting books on the floor - Lucas Paetow</footer>

<style is:global>
	@layer defaults {
		body {
			--padding: minmax(1rem, 1fr);
			--footer-main-intersection: 20svh;
			--header-spacing: var(--space-5);
			--nav-size: 2rem;
			--header-size: 10svh;
			--above-scene: calc((var(--nav-size) + var(--header-size)));

			display: grid;
			grid-template-columns:
				[full-start] var(--padding)
				[main-start] minmax(calc(320px - 2 * 1rem), 60rem)
				[main-end] var(--padding)
				[full-end];

			grid-template-rows:
				[nav-start] var(--nav-size)
				[nav-end header-start] var(--header-size)
				[header-end main-start] 1fr
				[footer-start] var(--footer-main-intersection)
				[main-end] minmax(calc(var(--above-scene) + var(--header-size)), max-content)
				[footer-end];
		}

		@media (min-width: 30rem) {
			body {
				--header-size: 15svh;
			}
		}

		@media (min-width: 40rem) {
			body {
				--header-size: 20svh;
			}
		}

		nav {
			grid-area: nav / full;
		}

		header {
			grid-area: header / full;
		}

		main {
			grid-area: main;
			display: grid;
			place-content: center;
		}

		footer {
			grid-area: footer / full;

			display: grid;
			place-content: end center;
			color: var(--grey-10);
			background-color: var(--grey-70);
		}
	}
</style>

---
import Layout from "../layouts/layout.astro";
import TV from "../features/tv/tv.astro";
import CassettePile from "../features/tv/cassettes/cassete-pile.astro";
import Remote from "../features/tv/remote/remote.astro";
import Room from "../features/tv/room.astro";
import Camera from "../features/tv/camera.astro";

import AboutCassette from "../features/tv/content/about-cassette.astro";
import IndexCassette from "../features/tv/content/index-cassette.astro";
import NowCassette from "../features/tv/content/now-cassette.astro";
import BewegungCassette from "../features/tv/content/bewegung-cassette.astro";
import CssDatabaseCassette from "../features/tv/content/css-database-cassette.astro";
import FixPrinterCassette from "../features/tv/content/fix-printer-cassette.astro";
import ThirdDimensionCassette from "../features/tv/content/third-dimension-cassette.astro";
import DinkelBergCassette from "../features/tv/content/dinkelberg-cassette.astro";
---

<script>
	/*

## todo: next steps

- program could feature the preview screens that you get when you put in a tape or just the links to the sub pages
=> on the home screen this makes only sense if the tapes also update

## tasks

- add dedicated options for flickering/lines or a general "screen realism"
=> this could also be a radio group with "none"/"mild"/"full"
- settings label buttons on the remote need some kind of grouping
- every tape should have a dedicated component for the preview screen

- everything is currently very ridgid, maybe container queries can improve this?

- vhs cassettes should have different colors weights and not color change when they were visited


## bugs

- all blocks have an outline but the tv
- the vhs slot cover cant move realistically since the background is overlaying it. We would need to create a cutout in the background



## refactorings

- unify css values and calculations
=> check vh/svh etc
- update custom property names
- extract similar functionality into classes
- improve remote color and borders
- 3d elements should all be blocks
- unify 3d button components
=> make the realistic inset a class that can be adjusted with custom properties
- disable js only functionality with @media (scripting: none)

## future features
- real inset of the displays
- shadows
- add more sounds

improve remote
=> enable channel functionality
=> mute and other settings should have their own icon on the screen
=> inputting numbers should also wait a little before going to that number
  

- add more realistic buttons
=> https://codepen.io/nicolasjesenberger/pen/gOqzJed

- rotate the scene based on mouse position => this might be a little to strong, it would make more sense to do this for the background
- animate putting in a new tape
- add scenery that changes with the content of the selected tape (background stuff, colors etc) and maybe even a parallax effect
- add height with boxes and gimmicks like a 3d sandwhich (2 buns + lettuce + patty + cheese + tomatO => https://codepen.io/qub3r-001/pen/KKveNaK)

*/
</script>

<Layout title="Copy and Paetow">
	<main>
		<Camera>
			<div class="tv-scene scene z-layer-interactivity">
				<span class="visually-hidden"
					>the scene shows a retro tv standing on a pile of vhs tapes. Selecting a tape will preview
					the content</span
				>

				<Remote className="interactive" />

				<TV className="tv-interactive" />

				<CassettePile className="interactive">
					<IndexCassette />
					<NowCassette />
					<BewegungCassette />
					<ThirdDimensionCassette />
					<DinkelBergCassette />
					<AboutCassette />
					<FixPrinterCassette />
					<CssDatabaseCassette />
				</CassettePile>

				<Room />
			</div>
		</Camera>
	</main>
</Layout>

<style is:global>
	@layer defaults {
		:where(body:has(#remote-modal[open]), body:has(#remote-modal:popover-open)) {
			position: fixed;
			width: 100%;
			height: 100%;

			.scene {
				--scene-padding: 0px;
				--remote-depth: 0px;
			}
		}

		main {
			display: grid;
			place-content: center;
		}
	}

	@layer components {
		.z-layer-interactivity {
			/* this are required for safari and firefox interactivity */
			transform: translateZ(calc(var(--tv-depth) * -1));

			.interactive {
				transform: translateZ(var(--tv-depth));
			}

			.tv-interactive {
				transform: translateZ(calc(var(--tv-depth) + var(--tv-offset-z)));
			}
		}

		.tv-scene {
			width: var(--scene-width);
			padding-block: var(--scene-padding);
		}
	}
</style>

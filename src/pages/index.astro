---
import Layout from "../layouts/layout.astro";
import TV from "../features/tv/tv.astro";
import CassettePile from "../features/tv/cassettes/cassete-pile.astro";
import Remote from "../features/tv/remote/remote.astro";
import Room from "../features/tv/room.astro";
---

<script>
	/*

## todo: remote
- enable channel functionality
- settings label buttons on the remote need some kind of grouping
- real remote buttons

## todo: content
- rewrite about text
- include bewegung text

## todo: animation and sounds
- add more sounds
=> tv turning on
=> static noise and animation of the static
- rotate the scene slightly based on mouse position

##todo: 3d
- add height with boxes and gimmicks like a 3d sandwhich (2 buns + lettuce + patty + cheese + tomatO => https://codepen.io/qub3r-001/pen/KKveNaK)
- turn the top level div inside of the block into a custom component that gets coordinates and can render the scene based on what the camera is like
- align remote screen in 3d scene

## bugs
- on safari modals are focused?
- 3d effects move the remote screen differently compared to the tapes
- all 3d elements need to either have an outline/border or some kind of shadow not a mix of both

*/
</script>

<Layout title="Copy and Paetow">
	<header class="visually-hidden">
		<h1>Hey, it</h1>
		<span
			>The scene features a retro tv standing on a pile of vhs tapes. Selecting a tape will preview
			its content</span
		>
	</header>
	<main>
		<div class="camera">
			<div class="tv-scene scene z-layer-interactivity">
				<Remote className="interactive" />

				<TV className="tv-interactive" />

				<CassettePile className="interactive" />

				<Room />
			</div>
		</div>
	</main>
</Layout>

<style is:global>
	@layer defaults {
		:where(body) {
			contain: layout;
		}

		main {
			display: grid;
			place-content: center;
		}
	}

	@layer components {
		.z-layer-interactivity {
			/* this are required for safari and firefox interactivity */
			transform: translateZ(calc(var(--tv-depth) * -1));

			.interactive {
				transform: translateZ(var(--tv-depth));
			}

			.tv-interactive {
				transform: translateZ(calc(var(--tv-depth) + var(--tv-offset-z)));
			}
		}

		.tv-scene {
			width: var(--scene-width);
			padding-block: var(--scene-padding);
		}

		:has(#that-3d-episode:target):not(:has(:where(:popover-open, [open]))) .camera {
			--block-render-top: block;
			--block-render-right: block;
			--perspective: 2000px;
			--camera-truck: 1200px;
			--camera-pan: -40deg;
			--camera-dolly: 1000px;
		}
	}
</style>

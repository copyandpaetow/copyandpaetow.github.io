---
import Layout from "../layouts/layout.astro";
import TV from "../features/tv/tv.astro";
import CassettePile from "../features/tv/cassettes/cassete-pile.astro";
import Cassette from "../features/tv/cassettes/cassette.astro";
import Remote from "../features/tv/remote/remote.astro";
import Room from "../features/tv/room.astro";
import Camera from "../features/tv/camera.astro";

import AboutPreview from "../features/tv/content/about-preview.astro";
import BewegungPreview from "../features/tv/content/bewegung-preview.astro";
import CssDatabasePreview from "../features/tv/content/css-database-preview.astro";
import IndexPreview from "../features/tv/content/index-preview.astro";
import NowPreview from "../features/tv/content/now-preview.astro";
import FixPrinterPreview from "../features/tv/content/fix-printer-preview.astro";
import ThirdDimensionPreview from "../features/tv/content/third-dimension-preview.astro";
import DinkelBergPreview from "../features/tv/content/dinkelberg-preview.astro";
import ScreenBackButton from "../features/tv/screen/screen-back-button.astro";
---

<script>
	/*

## todo: next steps


- add the back button to the previews
- create a component for the screens 

## tasks

- add dedicated options for flickering/lines or a general "screen realism"
=> this could also be a radio group with "none"/"mild"/"full"
- settings label buttons on the remote need some kind of grouping
- everything is currently very ridgid, maybe container queries can improve this?
- vhs cassettes should have different colors weights and not color change when they were visited

## bugs

- all blocks have an outline but the tv
- the vhs slot cover cant move realistically since the background is overlaying it. We would need to create a cutout in the background

## refactorings

- unify css values and calculations
=> check vh/svh etc
- update custom property names
- extract similar functionality into classes
- improve remote color and borders
- 3d elements should all be blocks
- unify 3d button components
=> make the realistic inset a class that can be adjusted with custom properties
- disable js only functionality with @media (scripting: none)

## future features
- real inset of the displays
- shadows
- add more sounds

improve remote
=> enable channel functionality
=> mute and other settings should have their own icon on the screen
=> inputting numbers should also wait a little before going to that number
  

- add more realistic buttons
=> https://codepen.io/nicolasjesenberger/pen/gOqzJed

- rotate the scene based on mouse position => this might be a little to strong, it would make more sense to do this for the background
- animate putting in a new tape
- add scenery that changes with the content of the selected tape (background stuff, colors etc) and maybe even a parallax effect
- add height with boxes and gimmicks like a 3d sandwhich (2 buns + lettuce + patty + cheese + tomatO => https://codepen.io/qub3r-001/pen/KKveNaK)

*/
</script>

<Layout title="Copy and Paetow">
	<main>
		<Camera>
			<div class="tv-scene scene z-layer-interactivity">
				<span class="visually-hidden"
					>the scene shows a retro tv standing on a pile of vhs tapes. Selecting a tape will preview
					the content</span
				>

				<Remote className="interactive" />

				<TV className="tv-interactive" />

				<CassettePile className="interactive">
					<Cassette decoType="c" id="intro">
						<a href="#intro" aria-label="jumps to the tv and previews this page"
							>the intro nobody asked for</a
						>
						<IndexPreview slot="screen">
							<ScreenBackButton />
						</IndexPreview>
					</Cassette>

					<Cassette decoType="c" tapeType="stripes" id="now">
						<a href="#now">now</a>
						<NowPreview slot="screen">
							<ScreenBackButton />
						</NowPreview>
					</Cassette>

					<Cassette decoType="a" tapeType="stripes" id="bewegung">
						<a href="#bewegung">how to make an animation library</a>
						<BewegungPreview slot="screen">
							<ScreenBackButton />
						</BewegungPreview>
					</Cassette>

					<Cassette decoType="b" tapeType="checked" id="that-3d-episode">
						<a href="#that-3d-episode">That 3D episode</a>
						<ThirdDimensionPreview slot="screen">
							<ScreenBackButton />
						</ThirdDimensionPreview>
					</Cassette>

					<Cassette decoType="b" tapeType="checked" id="dinkelberg">
						<a href="#dinkelberg">DINKELBERG</a>
						<DinkelBergPreview slot="screen">
							<ScreenBackButton />
						</DinkelBergPreview>
					</Cassette>

					<Cassette decoType="c" tapeType="stripes" id="about">
						<a href="#about">about</a>
						<AboutPreview slot="screen">
							<ScreenBackButton />
						</AboutPreview>
					</Cassette>

					<Cassette decoType="b" tapeType="checked" id="printer">
						<a href="#printer">How to fix your printer</a>
						<FixPrinterPreview slot="screen">
							<ScreenBackButton />
						</FixPrinterPreview>
					</Cassette>

					<Cassette decoType="b" tapeType="checked" id="css-database">
						<a href="#css-database">Connect your database with CSS</a>
						<CssDatabasePreview slot="screen">
							<ScreenBackButton />
						</CssDatabasePreview>
					</Cassette>
				</CassettePile>

				<Room />
			</div>
		</Camera>
	</main>
</Layout>

<style is:global>
	@layer defaults {
		:where(body:has(#remote-modal[open]), body:has(#remote-modal:popover-open)) {
			position: fixed;
			width: 100%;
			height: 100%;

			.scene {
				--scene-padding: 0px;
				--remote-depth: 0px;
			}
		}

		main {
			display: grid;
			place-content: center;
		}
	}

	@layer components {
		.z-layer-interactivity {
			/* this are required for safari and firefox interactivity */
			transform: translateZ(calc(var(--tv-depth) * -1));

			.interactive {
				transform: translateZ(var(--tv-depth));
			}

			.tv-interactive {
				transform: translateZ(calc(var(--tv-depth) + var(--tv-offset-z)));
			}
		}

		.tv-scene {
			width: var(--scene-width);
			padding-block: var(--scene-padding);
		}
	}
</style>

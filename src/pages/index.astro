---
import Layout from "../layouts/Layout.astro";
import TV from "../components/tv.astro";
import Cassette from "../components/cassette.astro";
---

<script>
	/*
- currently TV and Cassette have an empty wrapper just for styles
=> we could pass a class and define the html element tag from the outside

- we need some kind of settings for the goofyness
=> To show the casette or go straight to the article could be an option
=> no animations

- add covers around the cassettes
=> on hover/click etc the tape could move out a bit but not the cover
=> needs basic animation though

- make the tv sticky
- make labels into buttons with popover
=> custom component for the buttons? The Dialog? Both? One big one?
=> we need to emulate the close on esc/outside click behaviour
=> do we need inert as well?
=> add anchor elements in a <noscript> tag and use @supports selector(:popover-open) to check if they need display: initial or none

- extract styles of the screen and share with the popover
=> make it match with the tv stickyness

- hide the books coming out of the screen if we are scrolled down too much

- how to change the cassettes in the current slot?
=> .cassette:has(:popover-open) can give us the current cassette
=> maybe we need to add the cutout ability to the cassette itselfs because currently it is difficult to position the 
=> another option would be to make a cutout by painting everything besides a certain space with linear-gradient. The background would then need to be closer (z-index) than the cassettes. So they would need to be slotted in there somehow
=> if they are in a list together, maybe we can get scroll snapping to work?



  


*/
</script>

<Layout title="Bewegung">
	<nav></nav>

	<header></header>

	<main class="scene">
		<TV />
		<Cassette width="400px" decoType="c"><p>How to fix your printer</p></Cassette>
		<Cassette width="400px" decoType="a" tapeType="stripes" id="1">
			<dialog id="sfs" popover>
				<a href="#">screen content</a>
			</dialog>
			<button popovertarget="sfs">Scrollytelling for squirrels</button>
		</Cassette>
		<Cassette width="400px" decoType="b" tapeType="checked">
			<a href="#od">Connect your database with CSS</a>
		</Cassette>
		<Cassette width="400px" decoType="c" tapeType="stripes"><p>Your joke here</p></Cassette>
		<Cassette width="400px" decoType="a" tapeType="checked"><p>DINKELBERG</p></Cassette>
		<Cassette width="400px" decoType="a" tapeType="checked"><p>DINKELBERG 2</p></Cassette>
		<Cassette width="400px" decoType="a" tapeType="checked"><p>DINKELBERG 3</p></Cassette>
		<Cassette width="400px" decoType="a" tapeType="checked"><p>DINKELBERG 4</p></Cassette>
		<Cassette width="400px" decoType="a" tapeType="checked"><p>DINKELBERG 5</p></Cassette>
	</main>
</Layout>
<footer>Its 2023 and I am still putting books on the floor - Lucas Paetow</footer>

<style is:global>
	@layer defaults {
		body {
			--padding: minmax(1rem, 1fr);
			--footer-main-intersection: 20vh;
			--header-spacing: var(--space-5);

			display: grid;
			grid-template-columns:
				[full-start] var(--padding)
				[main-start] minmax(calc(320px - 2 * 1rem), 60rem)
				[main-end] var(--padding)
				[full-end];

			grid-template-rows:
				[nav-start] max-content
				[nav-end header-start] 30vh
				[header-end main-start] 1fr
				[footer-start] var(--footer-main-intersection)
				[main-end] minmax(10vh, max-content)
				[footer-end];
		}

		dialog {
			&::backdrop {
				content: "";
			}

			&[popover] .tv-cassette {
				opacity: 0.5;
			}
		}

		.tv-cassette:has(::backdrop) {
			opacity: 0.5;
		}

		nav {
			grid-area: nav / full;
		}

		header {
			grid-area: header / full;
		}

		main {
			grid-area: main;
			display: grid;
			grid-auto-rows: max-content;
			padding-bottom: 10%;

			/* & > .cassette {
				transform: scale(0.85);
			} */
		}

		footer {
			grid-area: footer / full;

			display: grid;
			place-content: end center;
			color: var(--grey-10);
			background-color: var(--grey-70);
		}
	}

	@layer components {
		nav {
		}

		header {
		}

		dialog {
			width: 400px;
			height: 301.8px;
			border-radius: 2rem;
			border: 4px solid black;
			top: 33.5vh;
			left: 50%;
			transform: translateX(-48%);
		}

		.scene {
			perspective: calc(100vw * 5);
			perspective-origin: 250vw -33vw;
			position: relative;

			& > * {
				margin-inline: auto;
			}

			& * {
				transform-style: preserve-3d;
				scroll-margin-top: 100vh;
			}

			& > *:nth-child(1) {
				z-index: 10;
			}
			& > *:nth-child(2) {
				transform: translateX(-5%);
				z-index: 9;
			}
			& > *:nth-child(3) {
				transform: translateX(-7%);
				z-index: 8;
			}
			& > *:nth-child(4) {
				transform: translateX(3%) translateZ(-30px);

				z-index: 6;
			}
			& > *:nth-child(5) {
				z-index: 5;
			}
			& > *:nth-child(6) {
				transform: translateX(5%) translateZ(30px);
				z-index: 4;
			}
		}
	}
</style>

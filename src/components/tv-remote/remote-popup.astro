---
import ContentSettings from "./content-settings.astro";
import RemoteBody from "./remote-body.astro";
import ContentProgram from "./content-program.astro";
import Screen from "../tv/screen.astro";

export interface Props {
	className?: string;
}

const { className = "" } = Astro.props;
---

<script>
	//
</script>

<div class={`remote-popup ${className}`}>
	<popover-helper type="modal">
		<dialog id="remote-modal" popover class="scene remote-modal">
			<Screen className="camera teletext">
				<nav class="screen-layout">
					<button popovertarget="remote-modal" popovertargetaction="hide">exit</button>
					<ol>
						<li>
							<button popovertarget="tv-program" popovertargetaction="show">program</button>
						</li>
						<li>
							<button popovertarget="settings" popovertargetaction="show">settings</button>
						</li>
					</ol>
				</nav>
			</Screen>

			<popover-helper>
				<dialog id="tv-program" popover="manual" class="camera secondary-menu">
					<Screen>
						<nav class="screen-layout">
							<button popovertarget="tv-program" popovertargetaction="hide">back</button>
							<ContentProgram />
						</nav>
					</Screen>
				</dialog>
			</popover-helper>

			<popover-helper>
				<dialog id="settings" popover="manual" class="camera secondary-menu">
					<Screen>
						<nav class="screen-layout">
							<button popovertarget="settings" popovertargetaction="hide">back</button>
							<ContentSettings />
						</nav>
					</Screen>
				</dialog>
			</popover-helper>
			<div class="remote-position">
				<RemoteBody />
			</div>
		</dialog>
	</popover-helper>
</div>

<style is:global>
	@layer components {
		.scene {
			--remote-active-offset: calc(var(--vhs-slot-height) * -1 - var(--tv-padding));
		}

		& popover-helper {
			display: contents;
		}

		.remote-popup {
			isolation: isolate;

			&:not(:has(:where(:popover-open, [open]))) {
				display: none;
			}
		}

		.remote-modal {
			grid-template-columns:
				1fr calc(var(--tv-width) - 2 * var(--tv-padding) - 2 * var(--screen-padding))
				1fr;
			grid-template-rows:
				calc(var(--scene-padding) + var(--remote-depth)) calc(
					var(--tv-padding) + var(--screen-padding)
				)
				calc(var(--screen-height) - 2 * var(--screen-padding))
				1fr;

			&:where(:popover-open, [open]) {
				display: grid;
			}

			&::backdrop {
				background: hsla(0, 0%, 0%, 0.5);
			}

			& > * {
				grid-column: 2/3;
			}

			.teletext {
				grid-row: 3/4;
			}

			.remote-position {
				grid-row: 4/5;
				justify-self: center;
			}

			&::where(:popover-open, [open]) .inactive-remote {
				display: none;
			}

			&:has(.secondary-menu:where(:popover-open, [open])) .teletext {
				display: none;
			}

			& .secondary-menu::backdrop {
				display: none;
			}
		}

		.secondary-menu {
			height: calc(var(--screen-height) - 2 * var(--screen-padding));
			width: calc(var(--tv-width) - 2 * var(--tv-padding) - 2 * var(--screen-padding));
			top: calc(var(--scene-padding) + var(--tv-padding) + var(--screen-padding));
			left: calc((100vw - var(--tv-width)) / 2 + var(--tv-padding) + var(--screen-padding));

			&:not(:where(:popover-open, [open])) {
				display: none;
			}
		}

		.screen-layout {
			display: grid;
			grid-template-rows: 20%;
			grid-auto-rows: max-content;
			grid-auto-flow: row;

			& :where(button) {
				height: max-content;
				width: max-content;
			}
		}

		@keyframes fromBottom {
			0% {
				transform: translateY(100vh);
			}
			100% {
				transform: translateY(var(--module-gap));
			}
		}

		.remote-modal:where(:popover-open, [open]) .remote-position {
			transform: translateY(var(--module-gap));
			height: calc(
				(100vh - var(--tv-height)) - var(--remote-active-offset) + var(--module-gap) +
					var(--tv-padding)
			);
			overflow-y: auto;

			@media (prefers-reduced-motion: no-preference) {
				animation: fromBottom 1s ease;
			}
		}
	}
</style>

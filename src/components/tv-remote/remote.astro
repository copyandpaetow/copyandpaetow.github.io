---
import ContentSettings from "./content-settings.astro";
import RemoteBody from "./remote-body.astro";
import ContentProgram from "./content-program.astro";
export interface Props {
	className?: string;
}

const { className = "" } = Astro.props;
---

<script>
	import "./popover-helper";
</script>

<div class={`remote ${className}`}>
	<!--@ts-expect-error attribute is too new -->
	<button popovertarget="remote-modal" popovertargetaction="show">
		show tv remote for navigation and settings</button
	>
	<popover-helper type="modal">
		<dialog id="remote-modal" popover class="scene remote-modal remote-tv-position">
			<popover-helper>
				<dialog id="tv-program" popover="manual" class="remote-tv-position secondary-menu">
					<div class="tv-layout">
						<section class="screen-content vcr-lines">
							<!--@ts-expect-error attribute is too new -->
							<button popovertarget="tv-program" popovertargetaction="hide">back</button>
							<ContentProgram />
						</section>
					</div>
				</dialog>
			</popover-helper>

			<popover-helper>
				<dialog id="settings" popover="manual" class="remote-tv-position secondary-menu">
					<div class="tv-layout">
						<section class="screen-content vcr-lines">
							<!--@ts-expect-error attribute is too new -->
							<button popovertarget="settings" popovertargetaction="hide">back</button>
							<ContentSettings />
						</section>
					</div>
				</dialog>
			</popover-helper>

			<dialog open class="teletext tv-layout">
				<div class="screen-content vcr-lines">
					<!--@ts-expect-error attribute is too new -->
					<button popovertarget="remote-modal" popovertargetaction="hide">exit</button>
					<ol>
						<li>
							<!--@ts-expect-error attribute is too new -->
							<button popovertarget="tv-program" popovertargetaction="show">program</button>
						</li>
						<li>
							<!--@ts-expect-error attribute is too new -->
							<button popovertarget="settings" popovertargetaction="show">settings</button>
						</li>
					</ol>
				</div>
			</dialog>
			<RemoteBody className="remote-position" />
		</dialog>
	</popover-helper>

	<style is:global>
		@layer components {
			.scene {
				--remote-depth: 50px;
				--remote-height: clamp(300px, 75svh, 500px);
				--remote-active-offset: calc(
					var(--vhs-slot-height) * -1 - var(--tv-bottom-padding) - var(--tv-padding)
				);
			}

			.remote {
				position: relative;
				height: var(--remote-depth);
				display: grid;

				& dialog {
					padding: 0;
				}

				& > * {
					grid-area: 1/1;
				}

				& popover-helper {
					transform-style: unset;
				}

				& > button {
					position: absolute;
					bottom: 0;
					height: calc(var(--remote-depth) * 1.5);
					width: 100%;
					appearance: none;
					color: transparent;
					background-color: transparent;
					border: none;
					transform: translateZ(var(--remote-depth));
				}
			}

			:where(.remote) :where(dialog) {
				display: none;
				overflow: initial;
				color: transparent;
				background: transparent;
				border: none;
				padding: 0;
			}

			.remote-tv-position:where(:popover-open, [open]),
			.remote-modal {
				display: grid;
				grid-template-columns: 1fr var(--tv-width) 1fr;
				grid-template-rows: calc(var(--scene-padding) + var(--remote-depth)) var(--tv-height) 1fr;
				width: 100vw;
				height: 100vh;
				overflow: visible;
				position: fixed;
				inset: 0;

				& > * {
					grid-column: 2/3;
				}

				& > .tv-layout {
					grid-row: 2/3;
				}

				& > .remote-position {
					grid-row: 3/4;
				}
			}

			.remote-modal {
				&:not(:where(:popover-open, [open])) {
					display: grid;

					top: calc(var(--scene-padding) * -1);
					left: calc((100vw - var(--tv-width)) / -2);
				}

				&::backdrop {
					background: hsla(0, 0%, 0%, 0.5);
				}

				&:where(:popover-open, [open]) .remote-position {
					transform: translateY(var(--remote-active-offset));
					height: calc((100vh - var(--tv-height)) - var(--remote-active-offset));
					overflow-y: scroll;

					@media (prefers-reduced-motion: no-preference) {
						transition: transform 1s ease;
					}
				}

				&:not(:where(:popover-open, [open])) .teletext {
					display: none;
				}

				&[open] {
					max-width: 100vw;
					max-height: 100vh;
				}

				& .secondary-menu[open]::backdrop {
					display: none;
				}

				& .secondary-menu[open] {
					top: 0;
					z-index: 4;
				}
			}

			:has(.secondary-menu:where(:popover-open, [open])) .teletext .screen-content {
				box-shadow: none;
			}

			.remote-position {
				position: relative;
				justify-self: center;
				transform-origin: left top;
				transform: translateY(calc(var(--tv-height) * -1 - var(--remote-depth) / 2 - 2px))
					translateX(20%) rotateY(115deg) rotateX(90deg) scale3d(0.5, 0.5, 0.5);
				z-index: 5;
				--block-render-bottom: block;
			}
		}
	</style>
</div>

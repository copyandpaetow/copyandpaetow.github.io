---
import CubeController from "./CubeController.astro";
---

<script>
	/*
	- how to add more walls? 
	=> we could replace the wall with js
	=> we could add them in the HTML and hide them with display:none etc

	- could we keep the walls but add a lot of content within? 



*/
</script>

<div class="cube-wrapper" data-cube-direction="horizontal">
	<div class="scene">
		<div class="cube" data-animation>
			<div class="wall horizontal"><button>1h</button></div>
			<div class="wall horizontal"><button>3h</button></div>

			<div class="wall applicate"><button>2h</button></div>
			<div class="wall applicate"><button>4h</button></div>

			<div class="wall vertical"><button>5v</button></div>
			<div class="wall vertical"><button>6v</button></div>
		</div>
	</div>

	<CubeController />
</div>

<style lang="scss">
	.cube-wrapper {
		--width: clamp(150px, 25vw, 300px);

		width: calc(var(--width) * 1.5);
		aspect-ratio: 1;
		display: grid;
		grid-template-rows: 1fr max-content;
		gap: var(--space-5);
	}

	.scene {
		--rotation: 20deg;

		width: var(--width);
		aspect-ratio: 1;
		perspective: calc(var(--width) * 5);
		position: relative;
		margin: auto;
		transition: rotate 1s ease;
	}

	[data-cube-direction="vertical"] .scene {
		rotate: 90deg;
	}

	[data-cube-direction="vertical"] .vertical {
		rotate: -90deg;
	}
	[data-cube-direction="vertical"] .applicate {
		rotate: calc(-90deg * var(--direction));
	}

	.scene :where(.cube, .wall) {
		transform-style: preserve-3d;
		position: absolute;
		inset: 0;
	}

	.cube {
		--animation-name: spin;
		--animation-duration: 6s;
		--animation-iterations: infinite;
		--animation-playstate: running;
		rotate: y var(--rotation);
	}

	.scene:hover .cube,
	.scene:focus-within .cube {
		--animation-playstate: paused;
	}

	.wall {
		display: grid;
		place-content: center;
	}

	:is(.horizontal, .vertical, .applicate):nth-of-type(odd) {
		--direction: 1;
	}

	:is(.horizontal, .vertical, .applicate):nth-of-type(even) {
		--direction: -1;
	}

	.wall {
		--turn: var(--turnAxis);
		transform: var(--turn) translateZ(calc(var(--width) / 2));
	}

	.horizontal {
		background-color: var(--red);
	}

	.vertical {
		background-color: var(--green);
		--turnAxis: rotateX(var(--turnValue));
	}

	:is(.horizontal, .vertical) {
		--turnValue: calc(90deg * var(--direction));
	}

	:is(.horizontal, .applicate) {
		--turnAxis: rotateY(var(--turnValue));
	}

	.applicate {
		background-color: var(--blue);
		--turnValue: calc(90deg - 90deg * var(--direction));
	}

	@keyframes spin {
		to {
			rotate: y calc(-360deg + var(--rotation));
		}
	}
</style>

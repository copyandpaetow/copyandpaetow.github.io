---
import Block from "./block.astro";

export interface Props {
	decoType?: "a" | "b" | "c";
	tapeType?: "blank" | "stripes" | "checked";
	id?: string;
}

const { decoType = "a", tapeType = "blank", id } = Astro.props;

const randomNumber = (min: number, max: number) => {
	return Math.floor(Math.random() * (max - min + 1) + min);
};

const randomXOffset = randomNumber(-3, 3);
const randomZOffset = randomNumber(10, 100);
---

<article
	class="cassette-scene"
	{...id && { id }}
	style=`
	--cassette-offset-x: ${randomXOffset}%;
	--cassette-offset-z: ${randomZOffset}px;`
>
	<Block className="cassette">
		<div slot="front" class="cassette-front">
			<div class="tape" data-deco-type={decoType} data-tape-type={tapeType}>
				<slot />
			</div>
		</div>
	</Block>
	<slot name="screen" />
</article>

<style is:global>
	@layer components {
		.cassette-scene {
			display: grid;
			justify-items: center;
			transform: translateX(calc(var(--cassette-offset-x))) translateZ(var(--cassette-offset-z));
			font-size: var(--font--1);
		}

		.cassette {
			--cassette-background: hsla(0, 0%, 10%, 1);

			--block-border: var(--border-width) solid var(--black);
			--block-background: var(--cassette-background);
			--block-aspect-ratio: var(--cassette-aspect-ratio);
			--block-depth: calc(var(--cassette-depth));

			grid-area: 1 / 1;

			& > [data-block-side="front"] {
				height: 100%;
			}
		}

		.cassette-front {
			height: 100%;

			--padding-inline: 0.5rem;
			--padding-block: 0.25rem;

			display: grid;
			grid-template-columns: [full-start reader-start] 10% [reader-end tape-start] 1fr [tape-end spacing-start] 2.5% [spacing-end full-end];
			grid-template-rows: 1fr;
			padding: var(--padding-block) var(--padding-inline);

			.tape {
				grid-area: 1 / tape;
			}

			&::before,
			&::after {
				content: "";
				grid-area: 1 / reader;
				width: 50%;
				height: 60%;
				transform: translateX(50%);
				background-color: hsla(0, 0%, 0%, 1);
				align-self: end;
			}
			&::after {
				width: 40%;
				height: 35%;
				transform: translateX(calc(75%)) translateY(0%);
				background-color: var(--cassette-background);
			}
		}

		.tape {
			height: 100%;
			background-color: white;
			border-radius: 0.25rem;
			display: grid;
			place-content: center;
			padding-inline: var(--space-2);
			position: relative;
			overflow: hidden;

			&[data-tape-type="stripes"] {
				--stripe-color: var(--grey-40);

				background: repeating-linear-gradient(
					to bottom,
					white,
					white 33%,
					var(--stripe-color) calc(33% + 1px)
				);
			}

			&[data-tape-type="checked"] {
				--stripe-color: var(--grey-40);

				background: repeating-linear-gradient(
						to bottom,
						transparent,
						transparent 33%,
						var(--stripe-color) calc(33% + 1px)
					),
					repeating-linear-gradient(to right, white, white 5%, var(--stripe-color) calc(5% + 1px));
			}

			& > * {
				height: 100%;
				overflow: hidden;

				-webkit-line-clamp: 2;
				-webkit-box-orient: vertical;
				display: -webkit-box;
			}
		}

		.tape[data-deco-type="a"] {
			&::before {
				content: "";
			}

			&::after {
				white-space: pre;
				display: grid;
				position: absolute;
				right: 0;
				top: 0;
				aspect-ratio: 1;
				height: 100%;
				place-content: center;
				text-align: center;
				content: "Video \A Cassette";
				font-size: 1px;
				line-height: 1;
				transform: rotateZ(-90deg) translateY(20%);
				background: linear-gradient(
					to bottom,
					var(--yellow) 0%,
					var(--yellow) 25%,
					var(--orange) 25%,
					var(--orange) 50%,
					var(--red) 50%,
					var(--red) 100%
				);
			}
		}

		.tape[data-deco-type="b"] {
			&::after,
			&::before {
				content: "";
				position: absolute;
				height: var(--front-height);
				width: var(--space-1);
				inset: 0;
				background-color: var(--blue);
			}

			&::before {
				content: "120";
				display: grid;
				place-content: center;
				line-height: 1;
				font-size: 1px;
			}

			&::after {
				width: var(--space--2);
				left: calc(100% - var(--space--2));
			}
		}

		.tape[data-deco-type="c"] {
			&::before {
				white-space: pre;
				display: grid;
				position: absolute;
				inset: 0;
				height: 100%;
				aspect-ratio: 1;
				font-size: 1px;
				place-content: start center;
				text-align: center;
				content: "Video \A Cassette";
				transform: rotateZ(-90deg) translateY(-5%);
				background: linear-gradient(
					to bottom,
					var(--red) 0%,
					var(--red) 40%,
					var(--magenta) 40%,
					var(--magenta) 80%,
					transparent 80%
				);
			}

			&::after {
				content: "";
				position: absolute;
				inset: 0;
				height: var(--front-height);
				width: var(--space--1);
				left: calc(100% - var(--space--1));
				background-color: var(--magenta);
			}
		}
	}
</style>

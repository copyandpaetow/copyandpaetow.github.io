---
import Block from "../../3d/block.astro";

export interface Props {
	className?: string;
	inert?: boolean;
}

import Power from "../../icons/power.svg?raw";
import Up from "../../icons/up.svg?raw";

const { className = "", inert } = Astro.props;
---

<script>
	//
</script>

<Block className={`remote-body ${className}`}>
	<section class="remote-front" {...inert && { inert: "" }}>
		<button class="power" popovertarget="remote-modal" popovertargetaction="hide"
			><span>exit</span><Block><Fragment set:html={Power} /></Block></button
		>
		<button class="channel row1"
			><span class="visually-hidden">channel up</span><Fragment set:html={Up} /></button
		>
		<button class="channel row2"
			><span>channel</span><span class="visually-hidden">channel down</span><Fragment
				set:html={Up}
			/></button
		>
		<button class="volumne row3"
			><span class="visually-hidden">volume up</span><Fragment set:html={Up} /></button
		>
		<button class="volumne row4">
			<span>vol</span>
			<span class="visually-hidden">volume down</span>
			<Fragment set:html={Up} />
		</button>
		<button class="row1"><span>1</span></button>
		<button class="row1"><span>2</span></button>
		<button class="row1"><span>3</span></button>
		<button class="row2"><span>4</span></button>
		<button class="row2"><span>5</span></button>
		<button class="row2"><span>6</span></button>
		<button class="row3"><span>7</span></button>
		<button class="row3"><span>8</span></button>
		<button class="row3"><span>9</span></button>
		<button class="row4"><span>0</span></button>
		<button class="row5"><span>home</span></button>
		<button class="row5"><span>back</span></button>
		<button class="row5"><span>select</span></button>

		<label for="settings-animation" class="row6"><span>Anim</span></label>
		<label for="settings-sound" class="row6"><span>Sound</span></label>
		<label for="settings-three-dimensional" class="row6"><span>3D</span></label>
	</section>
	<p slot="left" class="remote-label">settings</p>
</Block>

<style is:global>
	@layer components {
		.remote-body {
			--block-background: var(--tv-background);
			--block-depth: var(--remote-depth);
			--block-border: 2px solid var(--tv-border-color);
			--block-border-radius: var(--tv-border-radius);

			--block-render-front: block;
			--block-render-top: block;
			--block-render-right: block;
			--block-render-back: block;
			--block-render-bottom: block;
			--block-render-left: block;
		}

		.remote-front {
			--offset-direction: -1;

			display: grid;
			grid-template-columns:
				var(--remote-button-width) var(--remote-button-width) var(--remote-button-width)
				calc(var(--remote-button-width) * 1.25);
			grid-auto-rows: var(--remote-button-height);
			row-gap: calc(var(--remote-button-height) + var(--remote-button-gap));
			column-gap: var(--remote-button-gap);

			padding: var(--remote-button-height) calc(var(--remote-button-height) / 2);
			padding-bottom: 5rem;

			transform: translateZ(1px);

			.channel,
			.volumne,
			.power {
				grid-column: 4/5;
				width: var(--remote-button-width);
				height: var(--remote-button-height);
				place-self: center;
			}

			&::before {
				content: "";
				grid-area: 2 / 4 / 8 / 5;
				background: grey;
			}

			& :where(.channel, .volumne):nth-of-type(2n + 1) svg {
				transform: rotate(180deg);
			}

			.row1 {
				grid-row-start: 3;
			}
			.row2 {
				grid-row-start: 4;
			}
			.row3 {
				grid-row-start: 5;
			}
			.row4 {
				grid-row-start: 6;
			}

			.row5 {
				grid-row-start: 7;
			}
			.row6 {
				grid-row-start: 9;
			}
		}

		.power {
			--block-background: var(--power-active, rgb(255, 0, 0));
			--block-depth: 5px;
			--block-border: 2px solid var(--power-active-border, rgb(130, 0, 0));
			--block-width: var(--remote-button-width);
			--block-height: var(--remote-button-height);

			transform: translateZ(var(--block-depth));

			padding: 0;

			& span {
				--offset-direction: 1;
			}

			&:active {
				transform: translateZ(calc(var(--block-depth) / 2));
			}
		}

		.remote-settings {
			color: black;
			font-size: var(--font--2);
			display: grid;
			grid-template-columns:
				var(--remote-button-width) var(--remote-button-width) var(--remote-button-width)
				calc(var(--remote-button-width) * 1.25);
			grid-auto-rows: var(--remote-button-height);
			column-gap: var(--remote-button-gap);
			position: relative;
			margin-inline: -4px;
			padding: 4px;

			& span {
				--offset-direction: 1;
			}
		}

		:where(.remote-front) :where(button, label) {
			border: none;
			appearance: none;
			background: var(--tv-background);
			position: relative;
			display: grid;
			padding: 2px;
			background: black;

			& * {
				grid-area: 1 / 1 / 2 / 2;
			}

			& span {
				color: var(--black);
				font-size: var(--font--2);
				position: absolute;
				justify-self: center;
				height: var(--remote-button-height);
				top: calc(
					(var(--remote-button-height) + var(--remote-button-gap) / 2) * var(--offset-direction)
				);
			}

			& svg {
				height: 100%;
				aspect-ratio: 1;
				place-self: center;
			}

			&::before {
				content: "";
				position: absolute;
				inset: 1px;
				background: var(--tv-background);
				box-shadow: 1px 1px 2px 1px hsla(0, 0%, 0%, 0.25);
				border-radius: 4px;
			}

			&:active::before {
				box-shadow: 1px 1px 1px 0px hsla(0, 0%, 0%, 0.25);
			}
		}

		.remote-label {
			transform: rotate(90.01deg) translateX(100%) scaleX(calc(1 / var(--remote-scale)));
		}
	}
</style>

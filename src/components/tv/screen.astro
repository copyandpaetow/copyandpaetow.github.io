---
export interface Props {
	className?: string;
}

const { className = "" } = Astro.props;
---

<section class={`screen-content vcr-lines ${className}`}>
	<slot />
</section>

<style is:global>
	@layer components {
		.screen-content {
			--_save-screen-padding: var(--save-screen-padding, var(--space--1));
			--_screen-background: var(--screen-background, hsl(207.1, 15.9%, 61.76%));

			display: grid;
			grid-template-columns:
				[full-screen-start] var(--_save-screen-padding)
				[save-screen-start] 1fr
				[save-screen-end] var(--_save-screen-padding)
				[full-screen-end];
			grid-template-rows:
				[full-screen-start] var(--_save-screen-padding)
				[save-screen-start] 1fr
				[save-screen-end] var(--_save-screen-padding)
				[full-screen-end];

			border-radius: var(--screen-border-radius);
			overflow: hidden;
			font-family: "Press Start 2P";
			font-size: var(--font--2);

			background-color: var(--_screen-background);
			box-shadow:
				inset 0px 0px 15px 0px var(--_screen-background),
				0px 0px 15px 0px var(--_screen-background);

			width: 100%;
			height: 100%;

			& > :where(*) {
				grid-area: save-screen;
			}

			&:has(.full-screen) > :where(*) {
				grid-area: full-screen;
			}

			& * {
				font-size: var(--font--1);
			}
			& h1 {
				font-size: var(--font-1);
			}

			& button {
				appearance: none;
				background: transparent;
				border-color: transparent;
				color: white;
			}

			& ol {
				color: white;
				counter-reset: orderedlist;
			}

			& ol li::before {
				counter-increment: orderedlist;
				content: counter(orderedlist) ". ";
				align-self: end;
			}

			& a {
				color: white;
			}

			.vcr-lines {
				position: relative;

				&::after {
					content: "";
					position: absolute;
					inset: 0;
					background: linear-gradient(
						to bottom,
						hsla(207.1, 15.9%, 61.76%, 0.2) 50%,
						hsla(207.1, 15.9%, 51.76%, 0.1) 50%
					);
					background-size: 100% 4px;
					pointer-events: none;
				}
			}
		}
	}
</style>

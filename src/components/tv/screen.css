@keyframes flicker {
  from {
    opacity: 0.5;
  }
  to {
    opacity: 0.55;
  }
}

@keyframes scanlines {
  0% {
    transform: translateY(var(--_scanline-width));
  }
}

.screen-root {
  --_screen-background: var(--screen-background, hsl(207.1, 15.9%, 61.76%));
  --_screen-text-color: var(--screen-text-color, var(--black));
  --_scanline-width: 3px;
  --_flicker-color: var(--flicker-color, white);
  font-family: "Press Start 2P";
  font-size: var(--font--2);

  background-color: var(--_screen-background);

  :where(:has(#settings-tv-realism:checked)) &::before,
  :where(:has(#settings-tv-realism:checked)) &::after {
    content: "";
  }

  &::before,
  &::after {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    pointer-events: none;
    z-index: 5;
  }

  &::before {
    background: linear-gradient(
      to bottom,
      transparent 50%,
      rgba(0, 0, 0, 0.15) 51%
    );
    background-size: 100% var(--_scanline-width);
    animation: scanlines 200ms steps(60) infinite;
  }

  &::after {
    background: radial-gradient(
      ellipse at center,
      var(--_flicker-color) 0%,
      transparent 100%
    );
    animation: flicker 50ms infinite;
  }

  :has(#settings-animation:not(:checked)) & {
    --flicker-color: hsla(0, 100%, 100%, 0.5);
  }

  :has(#settings-animation:not(:checked)) &::before,
  :has(#settings-animation:not(:checked)) &::after {
    animation: none;
  }

  @media (prefers-reduced-motion) {
    --flicker-color: hsla(0, 100%, 100%, 0.5);

    &::before {
      animation: none;
    }
    &::after {
      animation: none;
    }
  }

  & * {
    font-size: var(--font--2);
    color: var(--_screen-text-color);
  }

  :has(#settings-tv-realism:checked) & * {
    text-shadow:
      0 0 0.08em var(--_screen-text-color),
      -0.08em 0 0.08em aqua,
      0.08em 0 0.08em fuchsia;
  }

  h1 {
    font-size: var(--font--1);
  }

  & :where(h1, h2) {
    margin-block: 0.5em 1em;
  }

  button {
    background: transparent;
    border-color: transparent;
    appearance: none;
    text-align: start;
    width: fit-content;
  }

  & :where(button, a, label, details[open] > summary) {
    &:focus-visible,
    &:active,
    &:hover {
      background-color: white;
      color: black;
      outline: none;
    }
  }

  li:has(button, a, label) {
    &:focus-within,
    &:hover {
      background-color: white;
      color: black;
    }
    & :where(button, a, label):focus-visible {
      outline: none;
      background: transparent;
      color: currentColor;
    }
  }

  summary > p,
  li.screen-menu:not(:has([open])) {
    &:hover {
      background-color: white;
      color: black;
    }
  }
}

.z-layer-interactivity {
  /* this are required for safari and firefox interactivity */
  transform: translateZ(calc(var(--tv-depth) * -1));

  .interactive {
    transform: translateZ(var(--tv-depth));
  }

  .tv-interactive {
    transform: translateZ(calc(var(--tv-depth) + var(--tv-offset-z)));
  }
}

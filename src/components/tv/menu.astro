---
export interface Props {
	className?: string;
}

const { className = "" } = Astro.props;
---

<section
	class={`screen-content-layout screen-clipped-border screen-text vcr-lines camera teletext ${className}`}
>
	<nav class="screen-layout">
		<button popovertarget="remote-modal" popovertargetaction="hide">exit</button>
		<ol>
			<li>
				<button popovertarget="tv-program" popovertargetaction="show">program</button>
			</li>
			<li>
				<button popovertarget="settings" popovertargetaction="show">settings</button>
			</li>
		</ol>
	</nav>
</section>

<popover-helper>
	<dialog id="tv-program" popover="manual" class="camera secondary-menu">
		<section class="screen-content-layout screen-clipped-border screen-text vcr-lines">
			<nav class="screen-layout">
				<button popovertarget="tv-program" popovertargetaction="hide">back</button>
				<ol class="content-program">
					<li>
						<a href="about">about</a>
					</li>
					<li>
						<a href="dinkelberg">dinkelberg</a>
					</li>
					<li>
						<a href="css-printer">css-printer</a>
					</li>
				</ol>
			</nav>
		</section>
	</dialog>
</popover-helper>

<popover-helper>
	<dialog id="settings" popover="manual" class="camera secondary-menu">
		<section class="screen-content-layout screen-clipped-border screen-text vcr-lines">
			<nav class="screen-layout">
				<button popovertarget="settings" popovertargetaction="hide">back</button>

				<ol class="content-settings">
					<li>
						<label for="settings-animation">Animations</label>
						<hr />
						<input type="checkbox" name="settings-animation" id="settings-animation" checked />
					</li>
					<li>
						<label for="settings-sound">Sound</label>
						<hr />
						<input type="checkbox" name="settings-sound" id="settings-sound" />
					</li>
					<li>
						<label for="settings-three-dimensional">3D effects</label>
						<hr />
						<input
							type="checkbox"
							name="settings-three-dimensional"
							id="settings-three-dimensional"
						/>
					</li>
				</ol>
			</nav>
		</section>
	</dialog>
</popover-helper>

<style is:global>
	@layer components {
		.screen-layout {
			display: grid;
			grid-template-rows: 20%;
			grid-auto-rows: max-content;
			grid-auto-flow: row;

			& :where(button) {
				height: max-content;
				width: max-content;
			}
		}

		.content-settings {
			& input {
				appearance: none;
				background-color: var(--block-background);
				position: absolute;
				width: 0;
				height: 0;
				z-index: -1;
			}

			& li {
				display: grid;
				grid-template-columns: max-content max-content 1fr max-content;
				grid-template-areas: "number title line state";
				gap: var(--_screen-content-gap);
			}

			& hr {
				border-bottom: 4px dotted currentColor;
				transform: translateY(2px);
				align-self: center;
			}

			& li::after {
				content: "off";
			}

			& li:has(input:checked)::after {
				content: "on";
			}
		}
	}
</style>

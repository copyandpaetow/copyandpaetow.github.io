---
import Power from "./icons/power.svg?raw";
import Play from "./icons/play.svg?raw";
import Pause from "./icons/pause.svg?raw";
import Eject from "./icons/eject.svg?raw";
import Mute from "./icons/mute.svg?raw";

export interface Props {
	className?: string;
}

const { className = "" } = Astro.props;
---

<section class=`vhs-control-panel ${className}`>
	<label for="controls-play">
		<Fragment set:html={Play} />
		<input slot="front" type="radio" name="controls" id="controls-play" checked />
		<span class="visually-hidden">plays the current vhs cassette</span>
	</label>
	<label for="controls-pause">
		<Fragment set:html={Pause} />
		<input slot="front" type="radio" name="controls" id="controls-pause" />
		<span class="visually-hidden">pauses all animations</span>
	</label>
	<label for="controls-eject">
		<Fragment set:html={Eject} />
		<input slot="front" type="radio" name="controls" id="controls-eject" />
		<span class="visually-hidden">ejects the current tape</span>
	</label>

	<label for="controls-mute">
		<Fragment set:html={Mute} />
		<input slot="front" type="checkbox" name="power" id="controls-mute" />
		<span class="visually-hidden">mutes all sound effects</span>
	</label>

	<label for="controls-power">
		<Fragment set:html={Power} />
		<input slot="front" type="checkbox" name="power" id="controls-power" checked />
		<span class="visually-hidden">turns the screen on/off</span>
	</label>
</section>

<style is:global>
	@layer components {
		.vhs-control-panel {
			display: grid;
			grid-template-columns: max-content max-content max-content max-content 1fr max-content;
			grid-template-areas: "play pause eject mute . power";

			& > label {
				cursor: pointer;
				color: white;
				transition: transform 100ms ease;
				box-shadow: var(--tv-realism-effect);

				aspect-ratio: 1;
				height: var(--vhs-controls-height);
				display: grid;
				border-radius: 2px;
				border-start-start-radius: 0;
				border-start-end-radius: 0;
			}

			& > label:has(input:focus-visible) {
				outline: var(--tv-outline);
			}

			& > label > svg {
				width: 50%;
				place-self: center;
			}

			& > label:last-of-type {
				grid-area: 1 / power;
			}

			& > label:has(:checked) {
				box-shadow:
					inset 0px 0px 1px 1px hsla(0, 0%, 0%, 0.33),
					inset 0px 0px 5px 1px hsla(0, 0%, 0%, 0.33);
			}

			& > label:has(:checked) path {
				fill: var(--green);
			}

			& > label:has(#controls-power:checked) path {
				fill: var(--red);
			}

			& > label:has(#controls-mute:checked) path {
				fill: transparent;
				stroke: var(--green);
			}

			& input {
				appearance: none;
				background-color: var(--block-background);
				position: absolute;
				width: 0;
				height: 0;
				z-index: -1;
			}
		}

		:has(#controls-eject:checked):not(:has(:target)) .cassettes > article:first-of-type,
		:has(#controls-eject:checked) .cassettes :target {
			.screen {
				scale: 0;
				transition: scale 200ms ease;
			}

			.cassette {
				transform: translateZ(3500px);
				transition: transform 300ms ease 200ms;
			}
		}

		:has(#controls-eject:checked) .vhs-slot::after {
			transform: translateZ(1px) rotateX(0deg);
		}

		:has(#controls-eject:checked) .static-background {
			opacity: 1;
		}

		:has(#controls-power:not(:checked)):has(#controls-eject:checked) .static-background {
			scale: 0;
			transition: scale 200ms ease;
		}

		:has(#controls-power:not(:checked)):not(:has(:target)) .cassettes > article:first-of-type,
		:has(#controls-power:not(:checked)) .cassettes :target {
			.screen {
				scale: 0;
				transition: scale 200ms ease;
			}
		}
	}
</style>

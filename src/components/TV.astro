---
import TVButtons from "./TVButtons.astro";
import Block from "./block.astro";
export interface Props {
	className?: string;
}

const { className = "" } = Astro.props;
---

<div class=`tv-scene ${className}`>
	<Block className="tv">
		<div slot="front" class="tv-front">
			<aside class="static-background"></aside>
			<aside class="cassette-slot"></aside>
			<TVButtons className="buttons" />
		</div>
		<div slot="right" class="speaker"></div>
		<div slot="left" class="speaker"></div>
	</Block>

	<div class="cassettes">
		<slot />
	</div>
</div>

<style is:global>
	@layer components {
		.tv-scene {
			--tv-width: clamp(300px, 80vw, 500px);
			--tv-depth: 300px;
			--tv-background: hsla(0, 0%, 16%, 1);
			--tv-padding-block: var(--space--1);
			--tv-padding-inline: var(--space--1);

			--cassettes-offset-z: calc((var(--tv-depth) - var(--cassette-depth)) / 2);

			--cassette-depth: 220px;
			--cassette-aspect-ratio: 5;

			--cover-offset-block: var(--space--3);
			--cover-offset-inline: var(--space--2);
			--cover-offset-depth: var(--space--2);

			--tv-button-padding-block: var(--space--3);
			--tv-button-font-size: var(--font--2);
			--tv-buttons-padding-block-start: var(--space--1);

			--cassette-slot-padding-block-start: var(--space--1);
			--cassette-slot-height: calc(
				(var(--tv-width) - var(--tv-padding-inline) * 2) / var(--cassette-aspect-ratio) +
					var(--cover-offset-block) * 2
			);

			--screen-frame-block: var(--space--1);
			--screen-frame-inline: var(--space--1);

			width: var(--tv-width);

			@media (min-width: 28rem) {
				--cassette-aspect-ratio: 6;
			}

			@media (min-width: 32rem) {
				--cassette-aspect-ratio: 7;
				--tv-padding-inline: var(--space-1);
				--tv-padding-block: var(--space-1);
			}
		}

		.tv-scene {
			/* this are required for safari and firefox interactivity */
			transform: translateZ(calc(var(--tv-depth) * -1));

			.cassettes {
				transform: translateZ(calc(var(--tv-depth) - var(--cassettes-offset-z)));
			}

			.tv {
				transform: translateZ(calc(var(--tv-depth)));
			}
		}

		.tv {
			--block-depth: var(--tv-depth);
			--block-background: var(--tv-background);
			--block-border: var(--border);
		}

		.tv-front {
			height: 100%;
			display: grid;
			grid-template-rows:
				[frame-start] var(--screen-frame-block)
				[screen-start] max-content
				[screen-end] var(--screen-frame-block)
				[frame-end cassette-padding-start] var(--cassette-slot-padding-block-start)
				[cassette-padding-end cassette-slot-start] max-content
				[cassette-slot-end buttons-padding-start] var(--tv-buttons-padding-block-start)
				[buttons-padding-end buttons-start] max-content
				[buttons-end];

			grid-template-columns:
				[frame-start] var(--screen-frame-block)
				[center-start] 1fr
				[center-end] var(--screen-frame-inline)
				[frame-end];

			padding: var(--tv-padding-block) var(--tv-padding-inline);

			&::before {
				content: "";
				grid-area: frame/frame;
				width: 100%;
				aspect-ratio: 1;
				border-inline: var(--screen-frame-inline) solid var(--black);
				border-block: var(--screen-frame-block) solid var(--light-black);
				box-shadow:
					inset 0px 0px 15px 0px hsl(0, 0%, 60%),
					0px 0px 15px 0px hsl(0, 0%, 40%);
			}

			.static-background {
				grid-area: screen/center;
				background: repeating-radial-gradient(circle at 50% 50%, white, black 0.00085px);
			}

			.cassette-slot {
				grid-area: cassette-slot/frame;
				background: var(--black);
				height: var(--cassette-slot-height);
			}

			.buttons {
				grid-area: buttons/frame;
			}

			.cassette-slot::after {
				content: "Copy and Paetow VHS Player deluxe";
				grid-area: tv-slot/center;
				background: var(--tv-background);
				position: relative;
				width: calc(100% - 2 * (var(--border-width)));
				height: calc(100% - 2 * (var(--border-width)));
				left: var(--border-width);
				top: var(--border-width);
				transform: rotateX(-90.01deg);
				transform-origin: top;
				transition: transform 400ms ease 400ms;
				display: grid;
				place-content: center;
				font-weight: bold;
				color: goldenrod;
			}
		}

		.cassettes {
			display: grid;
			grid-auto-flow: row;
			grid-auto-rows: max-content;
			padding-inline: var(--tv-padding-inline);

			&:not(:has(:target)) > article:first-of-type,
			& :target {
				--button-line-height: 1.1;
				--button-panel-height: calc(var(--tv-button-font-size) * var(--button-line-height));
				--first-cassette-offset: calc(
					(
							var(--tv-padding-block) + var(--tv-buttons-padding-block-start) +
								var(--cassette-slot-padding-block-start) + var(--button-panel-height) +
								var(--cassette-slot-height) + var(--cover-offset-block) * 2
						) * -1
				);

				transform: none;
				margin-top: var(--first-cassette-offset);
			}

			&:not(:has(:target)) > article:first-of-type .cassette,
			& :target .cassette {
				transform: translateZ(calc(var(--cassettes-offset-z) * 2));
			}

			.screen {
				--screen-width: calc(
					var(--tv-width) - (2 * var(--screen-frame-inline)) - (2 * var(--tv-padding-inline)) -
						(2 * var(--border-width)) + 1px
				);
				--screen-offset: calc(
					(
							var(--screen-width) + (var(--screen-frame-block) / 2) +
								(var(--cassette-slot-padding-block-start)) + var(--cover-offset-block) * 2
						) * -1
				);

				transform: translateZ(var(--cassettes-offset-z));
				display: none;
				position: absolute;
				width: calc(var(--screen-width));
				aspect-ratio: 1;
				top: var(--screen-offset);
				left: calc(var(--cassettes-offset-z) / 2 - 1px);
			}

			&:not(:has(:target)) > article:first-of-type .screen,
			& :target .screen {
				display: grid;
			}

			> :target {
				scroll-margin-block-start: calc(var(--tv-width) + var(--above-scene));
				order: -1;
			}
		}

		.speaker {
			--grill-separator: var(--space--1);
			--grill-spacing: 2px;

			display: grid;
			place-content: end center;
			height: 100%;
			width: var(--block-depth);
			padding: var(--tv-padding-block) var(--tv-padding-inline);

			&::before {
				content: "";
				aspect-ratio: 2.5;
				width: calc(var(--block-depth) - var(--tv-padding-inline) * 2);
				display: block;

				background: linear-gradient(
						to right,
						transparent 0%,
						transparent calc(50% - 2px),
						var(--tv-background) calc(50% - var(--grill-separator)),
						var(--tv-background) calc(50% + var(--grill-separator)),
						transparent calc(50% + 2px)
					),
					repeating-linear-gradient(
						transparent,
						transparent var(--grill-spacing),
						var(--black) var(--grill-spacing),
						var(--black) calc(var(--grill-spacing) * 2)
					);
			}
		}
	}
</style>

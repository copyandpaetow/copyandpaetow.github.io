---
import TVButtons from "./TVButtons.astro";
import TVRemote from "./TVRemote.astro";
import StaticBackground from "./TVStaticBackground.astro";
import Block from "./block.astro";
export interface Props {
	className?: string;
}

const { className = "" } = Astro.props;
---

<div class=`tv-scene flat-scene ${className}`>
	<span class="visually-hidden"
		>the scene shows a retro tv standing on a pile of vhs tapes. Selecting a tape will preview the
		content</span
	>

	<div class="remote-scene">
		<button popovertarget="remote"> show tv remote for navigation and settings</button>
		<div id="remote" popover class="tv-remote scene">
			<TVRemote className="ontop-of-tv" />
		</div>
	</div>

	<Block className="tv">
		<div slot="front" class="tv-front">
			<div class="screen-module">
				<StaticBackground className="static-background" />
			</div>
			<div class="vhs-player-module">
				<!-- <TVButtons className="vhs-controls" /> -->
				<aside class="vhs-slot"></aside>
			</div>
			<aside class="static-background"></aside>
		</div>
		<div slot="right" class="speaker"></div>
		<div slot="left" class="speaker"></div>
	</Block>

	<div class="cassettes">
		<slot />
	</div>
</div>
<style is:global>
	@layer components {
		.tv-scene {
			--tv-width: clamp(300px, calc(100vw - 2 * 1rem), 500px);
			--tv-depth: 300px;
			--tv-background: hsl(255, 2%, 77%);
			--tv-border-width: 2px;
			--tv-border-color: hsl(255, 2%, 67%);
			--tv-border: var(--tv-border-width) solid var(--tv-border-color);
			--tv-realism-effect: inset 0px 0px 1px 1px hsla(0, 0%, 0%, 0.5),
				inset 0px 0px 5px 1px hsla(0, 0%, 100%, 0.5);
			--tv-height: calc(
				var(--screen-height) + var(--vhs-slot-height) + 2 * var(--vhs-slot-padding) + 2 *
					var(--tv-border-width) + 3 * var(--module-padding) + var(--module-gap) * 2
			);
			--tv-outline-color: var(--blue);
			--tv-outline-width: 2px;
			--tv-outline: var(--tv-outline-width) solid var(--tv-outline-color);

			--cassette-depth: 220px;
			--cassette-aspect-ratio: 4;
			--cassette-active-offset-z: calc(var(--cassette-depth) / 4);
			--cassettes-offset-z: calc((var(--tv-depth) - var(--cassette-depth)) / 2);

			--module-padding: 0.75rem;
			--module-border-radius: 0.25rem;
			--module-gap: 1px;
			--module-realism-effect: 0px 0px 1px 1px hsla(0, 0%, 0%, 0.33),
				inset 0px 0px 5px 1px hsla(0, 0%, 100%, 0.5);

			--screen-background: black;
			--screen-border-radius: 1rem;
			--screen-padding: 0.5rem;
			--screen-border-color: var(--grey-85);
			--screen-border-color-offset: var(--grey-90);
			--screen-module-ratio: 1.2;
			--screen-border-offset: calc(var(--tv-border-width) + var(--module-padding));
			--screen-height: calc(
				(
					(var(--tv-width) - 2 * var(--tv-border-width) - 2 * var(--module-padding)) /
						var(--screen-module-ratio)
				)
			);

			--vhs-slot-padding: 0.25rem;
			--vhs-slot-ratio: calc(var(--cassette-aspect-ratio) - 0.25);
			--vhs-slot-width: calc(
				var(--tv-width) - 2 * var(--module-padding) - 2 * var(--tv-border-width)
			);
			--vhs-slot-height: calc(var(--vhs-slot-width) / var(--vhs-slot-ratio));

			--speaker-grill-color: var(--grey-85);

			--remote-depth: 50px;

			width: var(--tv-width);

			@media (min-width: 22rem) {
				--cassette-aspect-ratio: 5;
				--screen-padding: 1rem;
				--screen-border-radius: 1.5rem;
				--tv-border-width: 4px;
			}

			@media (min-width: 28rem) {
				--module-padding: 1rem;
				--screen-padding: 1.25rem;
				--screen-border-radius: 2rem;
				--cassette-aspect-ratio: 6;
				--tv-border-width: 8px;
			}
		}

		.tv-scene {
			/* this are required for safari and firefox interactivity */
			transform: translateZ(calc(var(--tv-depth) * -1));

			.cassettes {
				transform: translateZ(calc(var(--tv-depth) - var(--cassettes-offset-z)));
			}

			.tv,
			.remote-scene {
				transform: translateZ(calc(var(--tv-depth)));
			}
		}

		.tv {
			--block-depth: var(--tv-depth);
			--block-background: var(--tv-background);
			--block-border: var(--tv-border);

			& > * {
				border-radius: calc(var(--tv-border-width) / 2);
			}
		}

		.tv-front {
			height: 100%;
			display: grid;
			row-gap: var(--module-gap);
		}

		.screen-module {
			aspect-ratio: var(--screen-module-ratio);
			padding: var(--module-padding);

			border-radius: var(--module-border-radius);
			box-shadow: var(--module-realism-effect);

			display: grid;
			grid-template-columns:
				[full-screen-start] var(--screen-padding)
				[screen-content-start] 1fr
				[screen-content-end] var(--screen-padding)
				[full-screen-end];

			grid-template-rows:
				[full-screen-start] var(--screen-padding)
				[screen-content-start] calc(var(--screen-height) - 2 * var(--screen-padding))
				[screen-content-end] var(--screen-padding)
				[full-screen-end];

			&::before {
				content: "";
				grid-area: full-screen / full-screen;
				background: var(--screen-background);
				border-radius: var(--module-border-radius);
				border-inline: var(--screen-border-radius) solid var(--screen-border-color);
				border-block: var(--screen-border-radius) solid var(--screen-border-color-offset);
			}

			&::after {
				content: "";
				grid-area: screen-content / screen-content;
				border-radius: var(--screen-border-radius);
				background: var(--black);
			}

			> .static-background {
				grid-area: screen-content / screen-content;
				border-radius: var(--screen-border-radius);
				background: var(--black);
				z-index: 1;
				opacity: 0;
			}
		}

		.vhs-player-module {
			padding: var(--module-padding);
			border-radius: var(--module-border-radius);
			padding-top: 0;
			box-shadow: var(--module-realism-effect);
		}

		.vhs-slot {
			border-radius: var(--module-border-radius);
			padding: var(--vhs-slot-padding);
			padding-top: 0;
			height: calc(var(--vhs-slot-height) + 2 * var(--vhs-slot-padding));
			box-shadow: var(--tv-realism-effect);

			&::before {
				content: "";
				position: absolute;
				inset: var(--vhs-slot-padding);
				background: var(--black);
				border-radius: var(--module-border-radius);
			}

			&::after {
				content: "Copy and Paetow VHS Player deluxe";
				background: var(--tv-background);
				position: absolute;
				inset: calc(var(--vhs-slot-padding) * 2);
				transform: rotateX(-90.01deg);
				transform-origin: top;
				transition: transform 400ms ease 400ms;
				display: grid;
				place-content: center;
				font-weight: bold;
			}
		}

		.cassettes {
			display: grid;
			grid-auto-flow: row;
			grid-auto-rows: max-content;
			row-gap: 2px;

			.cassette {
				height: calc(var(--vhs-slot-height) - 2 * var(--vhs-slot-padding));
				aspect-ratio: var(--cassette-aspect-ratio);
			}

			&:not(:has(:target)) > article:first-of-type,
			& :target {
				transform: none;
				margin-top: calc(var(--tv-height) * -1);
				height: var(--tv-height);
				width: var(--tv-width);

				display: grid;
				grid-template-columns:
					var(--screen-border-offset) [content-start] var(--screen-padding) [screen-start] 1fr [screen-end] var(
						--screen-padding
					)
					[content-end] var(--screen-border-offset);
				grid-template-rows:
					var(--screen-border-offset) var(--screen-padding) [screen-start] calc(
						var(--screen-height) - 2 * var(--screen-padding)
					)
					[screen-end] var(--screen-padding) var(--module-padding)
					var(--vhs-slot-padding)
					[vhs-slot-start]
					var(--vhs-slot-height)
					[vhs-slot-end]
					var(--vhs-slot-padding)
					var(--screen-border-offset);
			}

			&:not(:has(:target)) > article:first-of-type .cassette,
			& :target .cassette {
				grid-area: vhs-slot / content;

				transform: translateZ(calc(var(--cassettes-offset-z) + var(--cassette-active-offset-z)))
					translateY(calc(var(--vhs-slot-padding) * 2));
			}

			& > article:nth-of-type(2) {
				transform: none;
			}

			.screen {
				transform: translateZ(var(--cassettes-offset-z));
				display: none;
				grid-area: screen / screen;
			}

			&:not(:has(:target)) > article:first-of-type .screen,
			& :target .screen {
				display: grid;
			}

			> :target {
				scroll-margin-block-start: calc(var(--tv-width) + var(--above-scene));
				order: -1;
			}
		}

		.speaker {
			display: grid;
			place-content: start center;
			height: 100%;
			width: 100%;
			padding: var(--module-padding);

			&::before {
				content: "";
				aspect-ratio: 2.5;
				width: calc(var(--tv-depth) * 0.8);
				display: block;
				border-radius: 50%;

				background: linear-gradient(
						90deg,
						transparent 48.5%,
						var(--tv-background) 48.5%,
						var(--tv-background) 51.5%,
						transparent 51.5%
					),
					linear-gradient(
						var(--speaker-grill-color) 0%,
						var(--tv-background) 10%,
						var(--tv-background) 40%,
						var(--speaker-grill-color) 50%,
						var(--tv-border-color) 50%
					);
				background-size: 100% 0.25rem;
			}
		}

		.remote-scene {
			position: relative;
			height: var(--remote-depth);
			display: grid;

			& > * {
				grid-area: 1/1;
			}

			& > button {
				position: absolute;
				bottom: 0;
				height: calc(var(--remote-depth) * 1.5);
				width: 100%;
				appearance: none;
				color: transparent;
				background-color: transparent;
				border: none;
				transform: translateZ(var(--remote-depth));
			}

			.tv-remote {
				display: grid;
				height: 100%;
				width: 100%;
				overflow: initial;
				color: transparent;
				background-color: transparent;
			}

			.ontop-of-tv {
				position: absolute;
				transform-origin: left top;
				transform: rotateY(115deg) rotateX(90deg) scale3d(0.5, 0.5, 0.5)
					translateZ(calc(var(--remote-depth) * -1 + var(--tv-border-width))) translateX(-50%)
					translateY(25%);
			}

			.tv-remote:not(:popover-open) {
				perspective: none;
			}

			.tv-remote::backdrop {
				background: hsla(0, 0%, 0%, 0.5);
			}

			.tv-remote:popover-open {
				height: var(--remote-depth);
				width: var(--tv-width);
				top: var(--above-scene);
				left: 50%;
				transform: translateX(-50%);
				overflow: visible;
				position: fixed;
			}

			.tv-remote:popover-open .ontop-of-tv {
				transform: translateX(calc(var(--tv-width) / 4));
				transition: transform 2s ease;
			}
		}
	}
</style>

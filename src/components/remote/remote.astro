---
import Back from "@icons/back.svg";
import RemoteBody from "./remote-body.astro";
import Settings from "./settings.astro";
import Program from "./program.astro";
import ScreenMenu from "./screen-menu.astro";

export interface Props {
  className?: string;
}

const { className = "" } = Astro.props;
---

<script>
  import { remoteInteractions } from "./remote-interactions.ts";

  remoteInteractions();
</script>

<div class=`remote ${className}`>
  <section class="remote-body three-dimensional interactive-remote" inert>
    <RemoteBody />
  </section>
  <ScreenMenu
    tag="section"
    id="settings-menu"
    className="screen-clipped-border screen-root overflow-hidden screen-animation top-level"
  >
    <p class="visually-hidden" slot="summary-open">open remote menu</p>
    <p class="with-icon-start" slot="summary-close"><Back /> exit</p>
    <ScreenMenu>
      <p slot="summary-open">program</p>
      <p class="with-icon-start" slot="summary-close"><Back /> back</p>
      <Program className=" " />
    </ScreenMenu>
    <ScreenMenu>
      <p slot="summary-open">settings</p>
      <p class="with-icon-start" slot="summary-close"><Back /> back</p>
      <Settings className=" " />
    </ScreenMenu>
  </ScreenMenu>
</div>

<style>
  .remote {
    height: var(--remote-depth);
    position: relative;
  }

  .remote-body {
    --block-background: var(--tv-background);
    --block-depth: var(--remote-depth);
    --block-border: var(--remote-border-width) solid var(--remote-border);
    --block-border-radius: var(--tv-border-radius);
  }

  .interactive-remote {
    transform-origin: top left;
    transform: translateY(-1px) translateX(25%) rotateY(115deg)
      rotateX(90.01deg) scale3d(var(--remote-scale), var(--remote-scale), 1);
    width: max-content;

    --block-render-front: grid;
    --block-render-bottom: block;
    --block-render-left: block;
    --block-render-x: "";
    --block-render-y: "";
    --block-x-direction: -1;
  }

  :global(
      :has(#settings-three-dimensional:checked):has(#that-3d-episode:target)
    )
    .interactive-remote {
    --block-y-direction: -1;
  }

  @media (scripting: enabled) {
    .remote:has([open]) .interactive-remote {
      --remote-active-rotation: 0deg;

      position: absolute;
      left: 50%;
      transform: translateZ(300px) translateY(var(--remote-active-offset))
        translateX(-50%) rotateX(var(--remote-active-rotation));
    }

    :global(
      :is(
          :has(#settings-three-dimensional:checked),
          :has(#settings-three-dimensional:checked):has(#that-3d-episode:target)
        )
        .remote:has(.remote-button:active)
        .interactive-remote
    ) {
      --remote-active-rotation: 25deg;
    }

    :global(
        :has(#settings-three-dimensional:checked):has(#that-3d-episode:target)
      )
      .remote:has([open])
      .interactive-remote {
      --remote-active-rotation: 25deg;

      --block-render-top: block;
      --block-render-right: block;
      --block-y-direction: 1;
      --block-x-direction: 1;
    }
  }

  .remote:has(.remote-screen > details:not([open]) > summary:focus-visible)
    .remote-body {
    &::before {
      outline: 2px solid blue;
    }
    .left {
      outline: 2px solid blue;
    }
  }
</style>

---
import Block from "./block.astro";
import Cassette from "./cassette.astro";
export interface Props {}

const {} = Astro.props;
---

<article class="tv">
	<Block width="450px" height="500px" depth="200px">
		<div slot="front" class="front">
			<section class="screen">
				<h1>Hi, Lucas here</h1>
				<p>
					I am looking for a opportunities to create delight and performant movements on the web.
				</p>
			</section>
			<div class="light"></div>
			<section class="tv-cassette">
				<Cassette width="400px">
					<p>the intro nobody asked for</p>
				</Cassette>
			</section>
		</div>
		<div slot="right" class="right">
			<div class="speaker"></div>
			<Block width="100px" height="30px" depth="10px">
				<p slot="front" class="power">POWER</p>
			</Block>
		</div>
		<div slot="back">
			<div class="antenna"></div>
		</div>
	</Block>
</article>

<style is:global>
	@layer components {
		.tv {
			--block-background: hsla(0, 0%, 16%, 1);
			--block-border: 4px solid black;
			--tv-color: white;

			color: var(--tv-color);
			position: sticky;
			top: 30vh;
		}

		.front {
			display: grid;
			grid-auto-flow: row;
			grid-template-rows: [screen-start] 1fr [screen-end light-start] max-content [light-end slot-start] 70px;
			gap: var(--space--1);
			padding: var(--space-1);
			padding-block-end: 10%;
			height: 100%;

			.light {
				background: green;
				width: 3rem;
				height: 1rem;
				border: 4px solid black;
				margin-inline-start: 1rem;
			}
		}

		.front .screen {
			display: grid;
			place-content: center;
			gap: var(--space-1);

			background: hsla(162, 16%, 62%, 1);
			border-radius: 2rem;
			border: 8px solid black;
			box-shadow: inset 0px 0px 20px white;
			font-family: "Press Start 2P";
			text-align: center;

			& h1 {
				font-size: var(--font-2);
			}

			& p {
				font-size: var(--font--2);
			}
		}

		.tv-cassette {
			background: black;
			border-radius: 0.25rem;
			margin: auto;
			position: relative;
			height: 100%;

			p {
				color: black;
			}

			& .block:first-of-type {
				transform: translateZ(calc(200px / -4)) translateY(5px);
			}

			&::after {
				content: "";
				position: absolute;
				right: 0%;
				top: 0;
				height: 100%;
				width: 2rem;
				background: linear-gradient(to right, transparent, black);
				transform: translate3d(20px, -7px, 50px);
				border-end-end-radius: 0.25rem;
				border-start-end-radius: 0.25rem;
			}
		}

		.antenna {
			--opposite: 1;

			position: relative;
			height: 250px;
			width: 50px;
			transform: translateY(-90%) translateX(200%);

			&::after,
			&::before {
				content: "";
				position: absolute;
				height: 100%;
				width: 10px;
				background: black;
				transform: rotateZ(calc(20deg * var(--opposite)));
				transform-origin: bottom;
				border-start-end-radius: 50%;
				border-start-start-radius: 50%;
			}
			&::before {
				--opposite: -1;
			}
		}

		.right {
			--block-background: hsla(0, 0%, 7%, 1);

			padding: var(--space-2);
			display: grid;
			place-content: space-between center;
			grid-auto-flow: row;

			.block {
				transform: translateZ(10px);
			}

			.cover {
				display: grid;
				place-content: center;
			}

			.speaker {
				--dot-color: black;
				--dot-size: 30%;
				--dot-density: 3%;
				--background: hsla(0, 0%, 7%, 1);

				border-radius: 100px;
				border: var(--block-border);
				width: calc(var(--block-depth) - var(--space-2) * 2);
				aspect-ratio: 1;
				background-image: radial-gradient(
						var(--dot-color) var(--dot-size),
						transparent var(--dot-size)
					),
					radial-gradient(var(--dot-color) var(--dot-size), transparent var(--dot-size));
				background-position: var(--dot-density);
				background-size: var(--dot-density) var(--dot-density);
				background-color: var(--background);
			}
		}
	}
</style>

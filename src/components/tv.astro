---
import Block from "./block.astro";
export interface Props {
	className?: string;
}

const { className = "" } = Astro.props;
---

<div class=`tv-scene ${className}`>
	<Block className="tv">
		<div slot="front" class="tv-front">
			<div class="static-background"></div>
		</div>
	</Block>

	<div class="cassettes">
		<slot />
	</div>
</div>

<style is:global>
	@layer components {
		.tv-scene {
			--tv-height: 500px;
			--tv-width: clamp(300px, 50vw, 500px);
			--tv-depth: 300px;
			--tv-background: hsla(0, 0%, 16%, 1);
			--tv-panel-height: 90px;
			--tv-slot-height: 70px;
			--tv-slot-padding: 1rem;
			--tv-screen-padding: 1rem;
			--tv-screen-height: calc(
				var(--tv-height) - var(--tv-slot-height) - var(--tv-slot-padding) - var(--tv-panel-height) -
					(2 * var(--border-width))
			);

			--tv-fully-visible: var(--above-scene);

			--cassette-height: 60px;
			--cassette-width: calc(var(--tv-width) - 50px);
			--cassette-depth: 200px;
			--cassette-inset-z: calc((var(--tv-depth) - var(--cassette-depth)) / 2);
			--cassette-inset-x: calc((var(--tv-width) - var(--cassette-width)) / 2);
			--cassette-active-offset-z: 50px;
		}

		.tv {
			--block-height: var(--tv-height);
			--block-depth: var(--tv-depth);
			--block-width: var(--tv-width);
			--block-background: var(--tv-background);
			--block-border: var(--border);

			position: sticky;
			top: var(--tv-fully-visible);

			> [data-block-side="front"] {
				--block-background: transparent;
			}
		}

		.tv-front {
			display: grid;
			grid-template-rows:
				[screen-start] var(--tv-screen-height)
				[screen-end tv-slot-start] var(--tv-slot-height)
				[tv-slot-end tv-panel-start] var(--tv-panel-height)
				[tv-panel-end];
			grid-template-columns:
				[full-start] var(--tv-screen-padding)
				[center-start] 1fr
				[center-end] var(--tv-screen-padding)
				[full-end];

			background: linear-gradient(
					to bottom,
					var(--tv-background) 0%,
					var(--tv-background) var(--tv-screen-padding),
					transparent var(--tv-screen-padding),
					transparent calc(var(--tv-screen-height) - var(--tv-screen-padding)),
					var(--tv-background) calc(var(--tv-screen-height) - var(--tv-screen-padding)),
					var(--tv-background) 100%
				),
				linear-gradient(
					to right,
					var(--tv-background) 0%,
					var(--tv-background) var(--tv-screen-padding),
					transparent var(--tv-screen-padding),
					transparent calc(var(--tv-width) - 2 * var(--tv-screen-padding)),
					var(--tv-background) calc(var(--tv-width) - 2 * var(--tv-screen-padding)),
					var(--tv-background) 100%
				);

			&::before {
				content: "";
				grid-area: tv-slot/center;
				background: var(--black);
			}

			.static-background {
				grid-area: screen/full;
				background: green;
				transform: translateZ(-1px);
			}
		}

		.cassettes {
			display: grid;
			grid-auto-flow: row;
			grid-auto-rows: max-content;

			transform: translateZ(calc(var(--cassette-inset-z) * -1))
				translateX(calc(var(--cassette-inset-x)));

			.screen {
				display: none;
				position: absolute;
				width: calc(var(--tv-width) - (2 * var(--tv-screen-padding)) - (2 * var(--border-width)));
				height: calc(
					var(--tv-screen-height) - (2 * var(--tv-screen-padding) - (var(--border-width)))
				);
				top: calc((var(--tv-screen-height) - var(--tv-screen-padding) / 2) * -1);
				left: calc(var(--tv-screen-padding) * -1);
				background-color: white;
				transform: translateZ(calc(var(--cassette-active-offset-z) * -1))
					translateX(calc(var(--cassette-inset-x) / 2 - 1px));
			}

			> [id] {
				scroll-margin-block-start: calc(var(--tv-height) + var(--tv-fully-visible));
			}

			> :target {
				order: -1;
			}

			&:not(:has(:target)) > article:first-of-type,
			& :target {
				--center-offset: calc(var(--tv-slot-height) - var(--cassette-height));

				position: sticky;
				top: calc(var(--tv-fully-visible) + var(--tv-screen-height) + var(--center-offset));
				transform: translateZ(calc(var(--cassette-inset-z) + var(--cassette-active-offset-z)));
				margin-top: calc(
					(var(--tv-slot-height) + var(--tv-slot-padding) + var(--cassette-height) * 1.5) * -1
				);
			}

			&:not(:has(:target)) > article:first-of-type .screen,
			& :target .screen {
				grid-row: 1/2;
				display: grid;
			}

			& > *:not(:target) {
				--buffer: 50%;

				position: sticky;
				top: calc(var(--tv-fully-visible) + var(--buffer));
			}
		}
	}
</style>

---
export interface Props {
	className?: string;
}

const { className = "" } = Astro.props;
---

<div class=`camera ${className}`>
	<slot />
</div>

<style is:global>
	@layer utilities {
		.camera {
			--_perspective: var(--perspective, 200000px);
			--_camera-truck: var(--camera-truck, 0px);
			--_camera-pedestal: var(--camera-pedestal, 0px);
			--_camera-dolly: var(--camera-dolly, 0px);

			--_camera-roll: var(--camera-roll, 0deg);
			--_camera-pan: var(--camera-pan, 0deg);
			--_camera-tilt: var(--camera-tilt, 0deg);

			transform: perspective(var(--_perspective)) translateZ(var(--_perspective))
				translateX(calc(var(--_camera-truck) * -1)) translateY(var(--_camera-pedestal))
				translateZ(calc(var(--_camera-dolly) * -1)) rotateX(var(--_camera-roll))
				rotateY(var(--_camera-pan)) rotateZ(var(--_camera-tilt))
				translateZ(calc(var(--_perspective) * -1));

			transform-style: preserve-3d;

			& :where(*) {
				transform-style: preserve-3d;
			}

			& :where(*:not(button, label, a, input)) {
				outline: 1px solid transparent;
			}

			&.debug1 {
				--perspective: 2000px;
				--camera-truck: 1200px;
				--camera-pan: -40deg;
				--block-render-top: block;
				--block-render-right: block;
			}

			&.debug2 {
				--perspective: 2000px;
				--camera-truck: 2000px;
				--camera-pan: -90deg;
				--block-render-top: block;
				--block-render-right: block;
			}
		}
	}
</style>

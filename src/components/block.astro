---
export interface Props {
	readingAngle?: string;
	className?: string;
	id?: string;
}

const { readingAngle, className = "", id } = Astro.props;
---

<div {...id && { id: id }} class=`block ${className}` data-reading-angle={readingAngle ?? "0deg"}>
	<div class="block-cover" data-block-side="front">
		<slot name="front" />
	</div>
	<div class="block-cover" data-block-side="back">
		<slot name="back" />
	</div>
	<div class="block-edge" data-block-side="bottom">
		<slot name="bottom" />
	</div>
	<div class="block-edge" data-block-side="top">
		<slot name="top" />
	</div>
	<div class="block-side" data-block-side="right">
		<slot name="right" />
	</div>
	<div class="block-side" data-block-side="left">
		<slot name="left" />
	</div>
</div>

<style is:global>
	@layer utilities {
		.block {
			--backface-rotate: 0deg;

			position: relative;
			width: var(--block-width);
			height: var(--block-height);
			translate: 0 0 calc(var(--block-depth) / -2);

			& > div {
				--opposite: 1;

				position: absolute;
				inset: 0;
				border: var(--block-border);
				background: var(--block-background);
			}

			& > div > :where(*) {
				height: 100%;
				width: 100%;
			}

			& > div:nth-child(2n) {
				--opposite: -1;
				--backface-rotate: 180deg;
			}

			& > .block-cover {
				height: var(--block-height);
				width: var(--block-width);
				transform: translateZ(calc(var(--block-depth) / 2 * var(--opposite)))
					rotateY(var(--backface-rotate));
			}
			& > .block-side {
				width: var(--block-depth);
				height: var(--block-height);
				left: calc((100% - var(--block-depth)) / 2);
				transform: rotateY(90deg) translateZ(calc(var(--block-width) / 2 * var(--opposite)))
					rotateY(var(--backface-rotate));
			}

			& > .block-edge {
				height: var(--block-depth);
				width: calc(var(--block-width));
				top: calc((var(--block-height) - var(--block-depth)) / 2);
				left: calc((100% - var(--block-width)) / 2);
				transform: rotateX(-90deg) translateZ(calc(var(--block-height) / 2 * var(--opposite)))
					rotateX(var(--backface-rotate));
			}

			&[data-reading-angle="90deg"] > .block-edge {
				height: calc(var(--block-width));
				width: var(--block-depth);
				top: calc((var(--block-height) - var(--block-width)) / 2);
				left: calc((100% - var(--block-depth)) / 2);
				transform: rotateX(-90deg) translateZ(calc(var(--block-height) / 2 * var(--opposite)))
					rotateX(var(--backface-rotate)) rotateZ(-90deg);
			}
		}
	}
</style>
